searchState.loadedDescShard("creachadair_imath_sys", 0, "A sign indicating a (strictly) negative value.\nA sign indicating a zero or positive value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a pointer to a brief, human-readable, …\nSets <code>c</code> to the absolute value of <code>a</code>.\nSets <code>c</code> to the sum of <code>a</code> and <code>b</code>.\nSets <code>c</code> to the sum of <code>a</code> and <code>value</code>.\nAllocates a fresh zero-valued <code>mpz_t</code> on the heap, returning …\nReturns the number of bytes to represent <code>z</code> in 2’s …\nReleases the storage used by <code>z</code>.\nReturns the comparator of <code>a</code> and <code>b</code>.\nReturns the comparator of the magnitudes of <code>a</code> and <code>b</code>, …\nReturns the comparator of <code>z</code> and the unsigned value <code>uv</code>.\nReturns the comparator of <code>z</code> and the signed value <code>v</code>.\nReturns the comparator of <code>z</code> and zero.\nReplaces the value of <code>c</code> with a copy of the value of <code>a</code>. No …\nReturns the number of significant bits in <code>z</code>.\nSets the default number of digits allocated to an <code>mp_int</code> …\nSets <code>q</code> and <code>r</code> to the quotent and remainder of <code>a / b</code>. …\nSets <code>q</code> and <code>r</code> to the quotient and remainder of <code>a / 2^p2</code>. …\nSets <code>q</code> and <code>*r</code> to the quotent and remainder of <code>a / value</code>. …\nReports whether <code>a</code> is divisible by <code>v</code>.\nSets <code>c</code> to the greatest common divisor of <code>a</code> and <code>b</code>, and sets …\nSets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power. It returns …\nSets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power. It returns …\nSets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power. It returns …\nSets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power, reduced …\nSets <code>c</code> to the value of <code>value</code> raised to the <code>b</code> power, modulo …\nSets <code>c</code> to the value of <code>a</code> raised to the <code>value</code> power, modulo …\nSets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power, reduced …\nReleases the storage used by <code>z</code> and also <code>z</code> itself. This …\nSets <code>c</code> to the greatest common divisor of <code>a</code> and <code>b</code>.\nInitializes <code>z</code> with 1-digit precision and sets it to zero.  …\nInitializes <code>z</code> to be a copy of an already-initialized value …\nInitializes <code>z</code> with at least <code>prec</code> digits of storage, and …\nInitializes <code>z</code> to the specified unsigned <code>value</code> at default …\nInitializes <code>z</code> to the specified signed <code>value</code> at default …\nSets <code>c</code> to the multiplicative inverse of <code>a</code> modulo <code>m</code>, if it …\nReturns <code>k &gt;= 0</code> such that <code>z</code> is <code>2^k</code>, if such a <code>k</code> exists. If …\nSets <code>c</code> to the least common multiple of <code>a</code> and <code>b</code>.\nSets <code>c</code> to the remainder of <code>a / m</code>. The remainder is pinned …\nSets <code>c</code> to the product of <code>a</code> and <code>b</code>.\nSets <code>c</code> to the product of <code>a</code> and <code>2^p2</code>. Requires <code>p2 &gt;= 0</code>.\nSets <code>c</code> to the product of <code>a</code> and <code>value</code>.\nSets the number of digits below which multiplication will …\nSets <code>c</code> to the additive inverse (negation) of <code>a</code>.\nReads a 2’s complement binary value from <code>buf</code> into <code>z</code>, …\nReads a string of ASCII digits in the specified <code>radix</code> from …\nReads a string of ASCII digits in the specified <code>radix</code> from …\nReads an unsigned binary value from <code>buf</code> into <code>z</code>, where <code>len</code> …\nSets <code>c</code> to the reduction constant for Barrett reduction by …\nSets <code>c</code> to the greatest integer not less than the <code>b</code>th root …\nSets <code>z</code> to the value of the specified unsigned <code>value</code>.\nSets <code>z</code> to the value of the specified signed <code>value</code>.\nSets <code>c</code> to the square of <code>a</code>.\nReports the minimum number of characters required to …\nSets <code>c</code> to the difference of <code>a</code> less <code>b</code>.\nSets <code>c</code> to the difference of <code>a</code> less <code>value</code>.\nSwaps the values and storage between <code>a</code> and <code>c</code>.\nConverts <code>z</code> to 2’s complement binary, writing at most …\nReturns <code>MP_OK</code> if <code>z</code> is representable as <code>mp_small</code>, else …\nConverts <code>z</code> to a zero-terminated string of characters in …\nReturns <code>MP_OK</code> if <code>z</code> is representable as <code>mp_usmall</code>, or …\nConverts the magnitude of <code>z</code> to unsigned binary, writing at …\nReturns the number of bytes required to represent <code>z</code> as an …\nSets <code>z</code> to zero. The allocated storage of <code>z</code> is not changed.\nSets <code>c</code> to the absolute value of <code>a</code>.\nSets <code>c</code> to the sum of <code>a</code> and <code>b</code>.\nSets <code>c</code> to the sum of <code>a</code> and integer <code>b</code>.\nAllocates a fresh zero-valued <code>mpq_t</code> on the heap, returning …\nReleases the storage used by <code>r</code>.\nReturns the comparator of <code>a</code> and <code>b</code>.\nReturns the comparator of the magnitudes of <code>a</code> and <code>b</code>, …\nReturns the comparator of <code>r</code> and the signed ratio <code>n / d</code>. It …\nReturns the comparator of <code>r</code> and zero.\nSets <code>c</code> to a copy of the value of <code>a</code>. No new memory is …\nReports the length in bytes of the buffer needed to …\nSets <code>z</code> to a copy of the denominator of <code>r</code>.\nReturns a pointer to the denominator of <code>r</code>.\nSets <code>c</code> to the ratio <code>a / b</code> if that ratio is defined. It …\nSets <code>c</code> to the ratio <code>a / b</code> if that ratio is defined. It …\nSets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power. It returns …\nReleases the storage used by <code>r</code> and also <code>r</code> itself. This …\nInitializes <code>r</code> with 1-digit precision and sets it to zero. …\nInitializes <code>r</code> to be a copy of an already-initialized value …\nInitializes <code>r</code> with at least <code>n_prec</code> digits of storage for …\nReports whether <code>r</code> is an integer, having canonical …\nSets <code>c</code> to the product of <code>a</code> and <code>b</code>.\nSets <code>c</code> to the product of <code>a</code> and integer <code>b</code>.\nSets <code>c</code> to the absolute value of <code>a</code>.\nSets <code>z</code> to a copy of the numerator of <code>r</code>.\nReturns a pointer to the numerator of <code>r</code>.\nSets <code>r</code> to the value represented by a zero-terminated …\nSets <code>r</code> to the value represented by a zero-terminated …\nSets <code>r</code> to the value represented by a zero-terminated …\nSets <code>r</code> to the value represented by a zero-terminated …\nSets <code>r</code> to the value represented by a zero-terminated …\nSets <code>c</code> to the reciprocal of <code>a</code> if the reciprocal is defined.\nReduces <code>r</code> in-place to lowest terms and canonical form.\nSets the value of <code>r</code> to the ratio of unsigned <code>numer</code> to …\nSets the value of <code>r</code> to the ratio of signed <code>numer</code> to signed …\nReports the sign of <code>r</code>.\nReports the minimum number of characters required to …\nSets <code>c</code> to the difference of <code>a</code> less <code>b</code>.\nSets <code>c</code> to the difference of <code>a</code> less integer <code>b</code>.\nConverts the value of <code>r</code> to a string in decimal-point …\nReports whether the numerator and denominator of <code>r</code> can be …\nConverts <code>r</code> to a zero-terminated string of the format <code>&quot;n/d&quot;</code> …\nSets <code>r</code> to zero. The allocated storage of <code>r</code> is not changed.")