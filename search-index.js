var N=null,E="",T="t",U="u",searchIndex={};
var R=["Sets `c` to the value of `a` raised to the `b` power. It…","Sets `c` to the value of `a` raised to the `b` power,…","Reads a string of ASCII digits in the specified `radix`…","Sets `c` to the absolute value of `a`.","Sets `c` to the sum of `a` and `b`.","Sets `c` to the difference of `a` less `b`.","Sets `c` to the product of `a` and `b`.","Sets `c` to the ratio `a / b` if that ratio is defined. It…","Returns the comparator of `a` and `b`.","Returns the comparator of the magnitudes of `a` and `b`,…","Reports the minimum number of characters required to…","Sets `r` to the value represented by a zero-terminated…","to_owned","clone_into","try_from","try_into","borrow_mut","result","formatter","reckoner","ordering","from_raw","into_raw","Reduces `r` in-place to lowest terms and canonical form.","Set value of integer to zero","integer","Replaces the value of `other` with a copy of the value of…","type_id","to_string","borrow","typeid","mp_round_mode","clone_from","partial_cmp","option","from_str","add_assign","sub_assign","mul_assign","div_assign","rem_assign","RoundMode","Rational"];
searchIndex["imath_sys"]={"doc":E,"i":[[3,"mpz_t","imath_sys",E,N,N],[12,"single",E,E,0,N],[12,"digits",E,E,0,N],[12,"alloc",E,E,0,N],[12,"used",E,E,0,N],[12,"sign",E,E,0,N],[3,"mpq_t",E,E,N,N],[12,"num",E,E,1,N],[12,"den",E,E,1,N],[7,"MP_OK",E,E,N,N],[7,"MP_FALSE",E,E,N,N],[7,"MP_TRUE",E,E,N,N],[7,"MP_MEMORY",E,E,N,N],[7,"MP_RANGE",E,E,N,N],[7,"MP_UNDEF",E,E,N,N],[7,"MP_TRUNC",E,E,N,N],[7,"MP_BADARG",E,E,N,N],[7,"MP_MINERR",E,E,N,N],[5,"mp_int_default_precision",E,"Sets the default number of digits allocated to an `mp_int`…",N,N],[5,"mp_int_multiply_threshold",E,"Sets the number of digits below which multiplication will…",N,N],[7,"MP_NEG",E,E,N,N],[7,"MP_ZPOS",E,E,N,N],[5,"mp_int_init",E,"Initializes `z` with 1-digit precision and sets it to…",N,N],[5,"mp_int_alloc",E,"Allocates a fresh zero-valued `mpz_t` on the heap,…",N,N],[5,"mp_int_init_size",E,"Initializes `z` with at least `prec` digits of storage,…",N,N],[5,"mp_int_init_copy",E,"Initializes `z` to be a copy of an already-initialized…",N,N],[5,"mp_int_init_value",E,"Initializes `z` to the specified signed `value` at default…",N,N],[5,"mp_int_init_uvalue",E,"Initializes `z` to the specified unsigned `value` at…",N,N],[5,"mp_int_set_value",E,"Sets `z` to the value of the specified signed `value`.",N,N],[5,"mp_int_set_uvalue",E,"Sets `z` to the value of the specified unsigned `value`.",N,N],[5,"mp_int_clear",E,"Releases the storage used by `z`.",N,N],[5,"mp_int_free",E,"Releases the storage used by `z` and also `z` itself. This…",N,N],[5,"mp_int_copy",E,"Replaces the value of `c` with a copy of the value of `a`.…",N,N],[5,"mp_int_swap",E,"Swaps the values and storage between `a` and `c`.",N,N],[5,"mp_int_zero",E,"Sets `z` to zero. The allocated storage of `z` is not…",N,N],[5,"mp_int_abs",E,R[3],N,N],[5,"mp_int_neg",E,"Sets `c` to the additive inverse (negation) of `a`.",N,N],[5,"mp_int_add",E,R[4],N,N],[5,"mp_int_add_value",E,"Sets `c` to the sum of `a` and `value`.",N,N],[5,"mp_int_sub",E,R[5],N,N],[5,"mp_int_sub_value",E,"Sets `c` to the difference of `a` less `value`.",N,N],[5,"mp_int_mul",E,R[6],N,N],[5,"mp_int_mul_value",E,"Sets `c` to the product of `a` and `value`.",N,N],[5,"mp_int_mul_pow2",E,"Sets `c` to the product of `a` and `2^p2`. Requires `p2 >=…",N,N],[5,"mp_int_sqr",E,"Sets `c` to the square of `a`.",N,N],[5,"mp_int_div",E,"Sets `q` and `r` to the quotent and remainder of `a / b`.…",N,N],[5,"mp_int_div_value",E,"Sets `q` and `*r` to the quotent and remainder of `a /…",N,N],[5,"mp_int_div_pow2",E,"Sets `q` and `r` to the quotient and remainder of `a /…",N,N],[5,"mp_int_mod",E,"Sets `c` to the remainder of `a / m`. The remainder is…",N,N],[5,"mp_int_expt",E,R[0],N,N],[5,"mp_int_expt_value",E,R[0],N,N],[5,"mp_int_expt_full",E,R[0],N,N],[5,"mp_int_compare",E,R[8],N,N],[5,"mp_int_compare_unsigned",E,R[9],N,N],[5,"mp_int_compare_zero",E,"Returns the comparator of `z` and zero.",N,N],[5,"mp_int_compare_value",E,"Returns the comparator of `z` and the signed value `v`.",N,N],[5,"mp_int_compare_uvalue",E,"Returns the comparator of `z` and the unsigned value `uv`.",N,N],[5,"mp_int_divisible_value",E,"Reports whether `a` is divisible by `v`.",N,N],[5,"mp_int_is_pow2",E,"Returns `k >= 0` such that `z` is `2^k`, if such a `k`…",N,N],[5,"mp_int_exptmod",E,R[1],N,N],[5,"mp_int_exptmod_evalue",E,"Sets `c` to the value of `a` raised to the `value` power,…",N,N],[5,"mp_int_exptmod_bvalue",E,"Sets `c` to the value of `value` raised to the `b` power,…",N,N],[5,"mp_int_exptmod_known",E,R[1],N,N],[5,"mp_int_redux_const",E,"Sets `c` to the reduction constant for Barrett reduction…",N,N],[5,"mp_int_invmod",E,"Sets `c` to the multiplicative inverse of `a` modulo `m`,…",N,N],[5,"mp_int_gcd",E,"Sets `c` to the greatest common divisor of `a` and `b`.",N,N],[5,"mp_int_egcd",E,"Sets `c` to the greatest common divisor of `a` and `b`,…",N,N],[5,"mp_int_lcm",E,"Sets `c` to the least common multiple of `a` and `b`.",N,N],[5,"mp_int_root",E,"Sets `c` to the greatest integer not less than the `b`th…",N,N],[5,"mp_int_to_int",E,"Returns `MP_OK` if `z` is representable as `mp_small`,…",N,N],[5,"mp_int_to_uint",E,"Returns `MP_OK` if `z` is representable as `mp_usmall`, or…",N,N],[5,"mp_int_to_string",E,"Converts `z` to a zero-terminated string of characters in…",N,N],[5,"mp_int_string_len",E,R[10],N,N],[5,"mp_int_read_string",E,R[2],N,N],[5,"mp_int_read_cstring",E,R[2],N,N],[5,"mp_int_count_bits",E,"Returns the number of significant bits in `z`.",N,N],[5,"mp_int_to_binary",E,"Converts `z` to 2's complement binary, writing at most…",N,N],[5,"mp_int_read_binary",E,"Reads a 2's complement binary value from `buf` into `z`,…",N,N],[5,"mp_int_binary_len",E,"Returns the number of bytes to represent `z` in 2's…",N,N],[5,"mp_int_to_unsigned",E,"Converts the magnitude of `z` to unsigned binary, writing…",N,N],[5,"mp_int_read_unsigned",E,"Reads an unsigned binary value from `buf` into `z`, where…",N,N],[5,"mp_int_unsigned_len",E,"Returns the number of bytes required to represent `z` as…",N,N],[5,"mp_error_string",E,"Returns a pointer to a brief, human-readable,…",N,N],[5,"mp_rat_init",E,"Initializes `r` with 1-digit precision and sets it to…",N,N],[5,"mp_rat_alloc",E,"Allocates a fresh zero-valued `mpq_t` on the heap,…",N,N],[5,"mp_rat_reduce",E,R[23],N,N],[5,"mp_rat_init_size",E,"Initializes `r` with at least `n_prec` digits of storage…",N,N],[5,"mp_rat_init_copy",E,"Initializes `r` to be a copy of an already-initialized…",N,N],[5,"mp_rat_set_value",E,"Sets the value of `r` to the ratio of signed `numer` to…",N,N],[5,"mp_rat_set_uvalue",E,"Sets the value of `r` to the ratio of unsigned `numer` to…",N,N],[5,"mp_rat_clear",E,"Releases the storage used by `r`.",N,N],[5,"mp_rat_free",E,"Releases the storage used by `r` and also `r` itself. This…",N,N],[5,"mp_rat_numer",E,"Sets `z` to a copy of the numerator of `r`.",N,N],[5,"mp_rat_numer_ref",E,"Returns a pointer to the numerator of `r`.",N,N],[5,"mp_rat_denom",E,"Sets `z` to a copy of the denominator of `r`.",N,N],[5,"mp_rat_denom_ref",E,"Returns a pointer to the denominator of `r`.",N,N],[5,"mp_rat_sign",E,"Reports the sign of `r`.",N,N],[5,"mp_rat_copy",E,"Sets `c` to a copy of the value of `a`. No new memory is…",N,N],[5,"mp_rat_zero",E,"Sets `r` to zero. The allocated storage of `r` is not…",N,N],[5,"mp_rat_abs",E,R[3],N,N],[5,"mp_rat_neg",E,R[3],N,N],[5,"mp_rat_recip",E,"Sets `c` to the reciprocal of `a` if the reciprocal is…",N,N],[5,"mp_rat_add",E,R[4],N,N],[5,"mp_rat_sub",E,R[5],N,N],[5,"mp_rat_mul",E,R[6],N,N],[5,"mp_rat_div",E,R[7],N,N],[5,"mp_rat_add_int",E,"Sets `c` to the sum of `a` and integer `b`.",N,N],[5,"mp_rat_sub_int",E,"Sets `c` to the difference of `a` less integer `b`.",N,N],[5,"mp_rat_mul_int",E,"Sets `c` to the product of `a` and integer `b`.",N,N],[5,"mp_rat_div_int",E,R[7],N,N],[5,"mp_rat_expt",E,R[0],N,N],[5,"mp_rat_compare",E,R[8],N,N],[5,"mp_rat_compare_unsigned",E,R[9],N,N],[5,"mp_rat_compare_zero",E,"Returns the comparator of `r` and zero.",N,N],[5,"mp_rat_compare_value",E,"Returns the comparator of `r` and the signed ratio `n /…",N,N],[5,"mp_rat_is_integer",E,"Reports whether `r` is an integer, having canonical…",N,N],[5,"mp_rat_to_ints",E,"Reports whether the numerator and denominator of `r` can…",N,N],[5,"mp_rat_to_string",E,"Converts `r` to a zero-terminated string of the format…",N,N],[5,"mp_rat_to_decimal",E,"Converts the value of `r` to a string in decimal-point…",N,N],[5,"mp_rat_string_len",E,R[10],N,N],[5,"mp_rat_decimal_len",E,"Reports the length in bytes of the buffer needed to…",N,N],[5,"mp_rat_read_string",E,R[11],N,N],[5,"mp_rat_read_cstring",E,R[11],N,N],[5,"mp_rat_read_ustring",E,R[11],N,N],[5,"mp_rat_read_decimal",E,R[11],N,N],[5,"mp_rat_read_cdecimal",E,R[11],N,N],[5,"mp_int_is_prime",E,E,N,N],[5,"mp_int_find_prime",E,E,N,N],[6,"__uint32_t",E,E,N,N],[6,"__uint64_t",E,E,N,N],[6,"mp_sign",E,E,N,N],[6,"mp_size",E,E,N,N],[6,"mp_result",E,E,N,N],[6,"mp_small",E,E,N,N],[6,"mp_usmall",E,E,N,N],[6,"mp_digit",E,E,N,N],[6,"mp_word",E,E,N,N],[6,"mp_int",E,E,N,N],[6,"mp_rat",E,E,N,N],[6,R[31],E,E,N,N],[17,"MP_MIN_RADIX",E,E,N,N],[17,"MP_MAX_RADIX",E,E,N,N],[17,"mp_round_mode_MP_ROUND_DOWN",E,E,N,N],[17,"mp_round_mode_MP_ROUND_HALF_UP",E,E,N,N],[17,"mp_round_mode_MP_ROUND_UP",E,E,N,N],[17,"mp_round_mode_MP_ROUND_HALF_DOWN",E,E,N,N],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"],[T]]]],[11,R[14],E,E,0,[[[U]],[R[17]]]],[11,R[15],E,E,0,[[],[R[17]]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,[[["self"]],[R[30]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"],[T]]]],[11,R[14],E,E,1,[[[U]],[R[17]]]],[11,R[15],E,E,1,[[],[R[17]]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,[[["self"]],[R[30]]]],[11,"clone",E,E,0,[[["self"]],["mpz_t"]]],[11,"clone",E,E,1,[[["self"]],["mpq_t"]]],[11,"fmt",E,E,0,[[["self"],[R[18]]],[R[17]]]],[11,"fmt",E,E,1,[[["self"],[R[18]]],[R[17]]]]],"p":[[3,"mpz_t"],[3,"mpq_t"]]};
searchIndex["reckoner"]={"doc":"Arbitrary precision integer and rational arithmetic…","i":[[3,"Integer",R[19],"Multiple precision integer value. Always heap allocated,…",N,N],[3,R[42],E,"Multiple precision rational value. Always heap allocated,…",N,N],[4,"Error",E,"Error used in `reckoner`, usually originating from…",N,N],[13,"StringReprContainedNul",E,"When converting from a string representation, the given…",0,N],[13,"ReadStringTruncated",E,"An error occurred when converting a string to a value, and…",0,N],[13,"RemainderOutsideBounds",E,"The result of a remainder operation was outside the…",0,N],[13,"ConversionOutsideRange",E,"Could not convert a value to a primitive integer type…",0,N],[13,"IntParseFailed",E,"Integer parse failed.",0,N],[13,"NoErrorPossible",E,"It impossible for this error to occur.",0,N],[13,"UnknownRoundingMode",E,"Unknown value for an imath rounding mode.",0,N],[13,"SysError",E,"Internal error from `imath_sys`.",0,N],[12,"code","reckoner::Error","Internal `imath_sys` error code.",0,N],[12,"msg",E,"Custom message to display.",0,N],[4,R[41],R[19],"as a decimal value. There are four rounding modes…",N,N],[13,"Down",E,"Truncates the value toward zero.",1,N],[13,"Up",E,"Rounds the value away from zero.",1,N],[13,"HalfUp",E,"Rounds the value to nearest digit, half rounds upward.",1,N],[13,"HalfDown",E,"Rounds the value to nearest digit, half goes toward zero.",1,N],[11,"add",E,"Add two integers and return the result",2,[[["self"]],["self"]]],[11,R[36],E,"Add two integers and assign the result to self",2,[[["self"],["self"]]]],[11,"subtract",E,"Subtract two integers and return the result",2,[[["self"]],["self"]]],[11,"subtract_assign",E,"Subtract two integers and assign the result to self",2,[[["self"],["self"]]]],[11,"multiply",E,"Multiply two integers and return the result",2,[[["self"]],["self"]]],[11,"multiply_assign",E,"Multiply two integers and assign the result to self",2,[[["self"],["self"]]]],[11,"negate",E,"Return the additive inverse",2,[[["self"]],["self"]]],[11,"negate_assign",E,"Assign the additive inverse to self",2,[[["self"]]]],[11,"absolute_value",E,"Return the absolute value",2,[[["self"]],["self"]]],[11,"absolute_value_assign",E,"Assign the absolute value to self",2,[[["self"]]]],[11,"divide_full",E,"Divide two integers and return quotient and remainder",2,[[["self"]]]],[11,"divide",E,"Divide two integers and return only quotient",2,[[["self"]],["self"]]],[11,"divide_assign",E,"Divide two integers and assign the result to self",2,[[["self"],["self"]]]],[11,"remainder",E,"Divide two integers and return only remainder",2,[[["self"]],["self"]]],[11,"remainder_assign",E,"Divide two integers and assign the remainder to self",2,[[["self"],["self"]]]],[11,"new",E,"Construct a new integer with a default value of zero.",2,[[],["self"]]],[11,R[21],E,"Construct an Integer from a raw non-null pointer to…",2,[[],["self"]]],[11,R[22],E,"Consumes the Integer, returning a wrapped raw pointer.",2,[[[R[25]]]]],[11,"copy_to",E,R[26],2,[[["self"],["self"]]]],[11,"zero",E,R[24],2,[[["self"]]]],[11,"compare",E,"Compare two integers",2,[[["self"]],[R[20]]]],[11,"compare_magnitude",E,"Compare the magnitude of two integers, not taking sign…",2,[[["self"]],[R[20]]]],[11,"compare_zero",E,"Compare an integer to zero.",2,[[["self"]],[R[20]]]],[11,"new",E,"Create a new rational with a default value of zero (0/1).",3,[[],["self"]]],[11,R[21],E,"Construct a Rational from a raw non-null pointer to…",3,[[],["self"]]],[11,R[22],E,"Consumes the Rational, returning a wrapped raw pointer.",3,[[["rational"]]]],[11,"reduce",E,R[23],3,[[["self"]]]],[11,"zero",E,R[24],3,[[["self"]]]],[11,"numerator",E,"Return a copy of the numerator of the rational value",3,[[["self"]],[R[25]]]],[11,"denominator",E,"Return a copy of the denominator of the rational value",3,[[["self"]],[R[25]]]],[11,"copy_to",E,R[26],3,[[["self"],["self"]]]],[11,"to_decimal_string",E,"Converts the value of `self` to a string in base-10…",3,[[["roundmode"],["u16"],["self"]],["string"]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"],[T]]]],[11,R[28],E,E,2,[[["self"]],["string"]]],[11,R[14],E,E,2,[[[U]],[R[17]]]],[11,R[15],E,E,2,[[],[R[17]]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[27],E,E,2,[[["self"]],[R[30]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"],[T]]]],[11,R[28],E,E,3,[[["self"]],["string"]]],[11,R[14],E,E,3,[[[U]],[R[17]]]],[11,R[15],E,E,3,[[],[R[17]]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[T]]],[11,R[27],E,E,3,[[["self"]],[R[30]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"],[T]]]],[11,R[28],E,E,0,[[["self"]],["string"]]],[11,R[14],E,E,0,[[[U]],[R[17]]]],[11,R[15],E,E,0,[[],[R[17]]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,[[["self"]],[R[30]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[14],E,E,1,[[[U]],[R[17]]]],[11,R[15],E,E,1,[[],[R[17]]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,[[["self"]],[R[30]]]],[11,"drop",E,E,2,[[["self"]]]],[11,"drop",E,E,3,[[["self"]]]],[11,"into",E,E,1,[[],[R[31]]]],[11,"from",E,E,0,[[["tryfrominterror"]],["self"]]],[11,"from",E,E,0,[[["infallible"]],["self"]]],[11,"from",E,E,0,[[["parseinterror"]],["self"]]],[11,"from",E,E,2,[[["i8"]],["self"]]],[11,"from",E,E,2,[[["i8"]],["self"]]],[11,"from",E,E,2,[[["u8"]],["self"]]],[11,"from",E,E,2,[[["u8"]],["self"]]],[11,"from",E,E,2,[[["i16"]],["self"]]],[11,"from",E,E,2,[[["i16"]],["self"]]],[11,"from",E,E,2,[[["u16"]],["self"]]],[11,"from",E,E,2,[[["u16"]],["self"]]],[11,"from",E,E,2,[[["i32"]],["self"]]],[11,"from",E,E,2,[[["i32"]],["self"]]],[11,"from",E,E,2,[[["u32"]],["self"]]],[11,"from",E,E,2,[[["u32"]],["self"]]],[11,"from",E,E,2,[[["i64"]],["self"]]],[11,"from",E,E,2,[[["i64"]],["self"]]],[11,"from",E,E,2,[[["u64"]],["self"]]],[11,"from",E,E,2,[[["u64"]],["self"]]],[11,"from",E,E,2,[[["i128"]],["self"]]],[11,"from",E,E,2,[[["i128"]],["self"]]],[11,"from",E,E,2,[[["u128"]],["self"]]],[11,"from",E,E,2,[[["u128"]],["self"]]],[11,"clone",E,E,0,[[["self"]],["error"]]],[11,"clone",E,E,2,[[["self"]],["self"]]],[11,R[32],E,E,2,[[["self"],["self"]]]],[11,"clone",E,E,3,[[["self"]],["self"]]],[11,R[32],E,E,3,[[["self"],["self"]]]],[11,"default",E,E,2,[[],["self"]]],[11,"default",E,E,3,[[],["self"]]],[11,"cmp",E,E,2,[[["self"]],[R[20]]]],[11,"eq",E,E,0,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["error"]],["bool"]]],[11,"eq",E,E,2,[[[R[25]],["self"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["u8"]],["bool"]]],[11,"eq",E,E,2,[[["i8"],["self"]],["bool"]]],[11,"eq",E,E,2,[[["u16"],["self"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["i16"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["i32"]],["bool"]]],[11,"eq",E,E,2,[[["u32"],["self"]],["bool"]]],[11,"eq",E,E,2,[[["i64"],["self"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["u64"]],["bool"]]],[11,"eq",E,E,2,[[["i128"],["self"]],["bool"]]],[11,"eq",E,E,2,[[["self"],["u128"]],["bool"]]],[11,R[33],E,E,2,[[[R[25]],["self"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["self"],["u8"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["i8"],["self"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["u16"],["self"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["self"],["i16"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["self"],["i32"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["u32"],["self"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["i64"],["self"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["self"],["u64"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["i128"],["self"]],[[R[34],[R[20]]],[R[20]]]]],[11,R[33],E,E,2,[[["self"],["u128"]],[[R[34],[R[20]]],[R[20]]]]],[11,"fmt",E,E,0,[[["self"],[R[18]]],[R[17]]]],[11,"fmt",E,E,2,[[["self"],[R[18]]],[R[17]]]],[11,"fmt",E,E,3,[[["self"],[R[18]]],[R[17]]]],[11,"fmt",E,E,0,[[["self"],[R[18]]],[R[17]]]],[11,"fmt",E,E,2,[[["self"],[R[18]]],[R[17]]]],[11,"fmt",E,E,3,[[["self"],[R[18]]],[R[17]]]],[11,"div",E,E,2,[[[R[25]]]]],[11,"div",E,E,2,[[[R[25]]]]],[11,"div",E,E,2,[[["i8"]]]],[11,"div",E,E,2,[[["i8"]]]],[11,"div",E,E,2,[[["u8"]]]],[11,"div",E,E,2,[[["u8"]]]],[11,"div",E,E,2,[[["i16"]]]],[11,"div",E,E,2,[[["i16"]]]],[11,"div",E,E,2,[[["u16"]]]],[11,"div",E,E,2,[[["u16"]]]],[11,"div",E,E,2,[[["i32"]]]],[11,"div",E,E,2,[[["i32"]]]],[11,"div",E,E,2,[[["u32"]]]],[11,"div",E,E,2,[[["u32"]]]],[11,"div",E,E,2,[[["i64"]]]],[11,"div",E,E,2,[[["i64"]]]],[11,"div",E,E,2,[[["u64"]]]],[11,"div",E,E,2,[[["u64"]]]],[11,"div",E,E,2,[[["i128"]]]],[11,"div",E,E,2,[[["i128"]]]],[11,"div",E,E,2,[[["u128"]]]],[11,"div",E,E,2,[[["u128"]]]],[11,"rem",E,E,2,[[[R[25]]]]],[11,"rem",E,E,2,[[[R[25]]]]],[11,"rem",E,E,2,[[["i8"]]]],[11,"rem",E,E,2,[[["i8"]]]],[11,"rem",E,E,2,[[["u8"]]]],[11,"rem",E,E,2,[[["u8"]]]],[11,"rem",E,E,2,[[["i16"]]]],[11,"rem",E,E,2,[[["i16"]]]],[11,"rem",E,E,2,[[["u16"]]]],[11,"rem",E,E,2,[[["u16"]]]],[11,"rem",E,E,2,[[["i32"]]]],[11,"rem",E,E,2,[[["i32"]]]],[11,"rem",E,E,2,[[["u32"]]]],[11,"rem",E,E,2,[[["u32"]]]],[11,"rem",E,E,2,[[["i64"]]]],[11,"rem",E,E,2,[[["i64"]]]],[11,"rem",E,E,2,[[["u64"]]]],[11,"rem",E,E,2,[[["u64"]]]],[11,"rem",E,E,2,[[["i128"]]]],[11,"rem",E,E,2,[[["i128"]]]],[11,"rem",E,E,2,[[["u128"]]]],[11,"rem",E,E,2,[[["u128"]]]],[11,"sub",E,E,2,[[[R[25]]]]],[11,"sub",E,E,2,[[[R[25]]]]],[11,"sub",E,E,2,[[["i8"]]]],[11,"sub",E,E,2,[[["i8"]]]],[11,"sub",E,E,2,[[["u8"]]]],[11,"sub",E,E,2,[[["u8"]]]],[11,"sub",E,E,2,[[["i16"]]]],[11,"sub",E,E,2,[[["i16"]]]],[11,"sub",E,E,2,[[["u16"]]]],[11,"sub",E,E,2,[[["u16"]]]],[11,"sub",E,E,2,[[["i32"]]]],[11,"sub",E,E,2,[[["i32"]]]],[11,"sub",E,E,2,[[["u32"]]]],[11,"sub",E,E,2,[[["u32"]]]],[11,"sub",E,E,2,[[["i64"]]]],[11,"sub",E,E,2,[[["i64"]]]],[11,"sub",E,E,2,[[["u64"]]]],[11,"sub",E,E,2,[[["u64"]]]],[11,"sub",E,E,2,[[["i128"]]]],[11,"sub",E,E,2,[[["i128"]]]],[11,"sub",E,E,2,[[["u128"]]]],[11,"sub",E,E,2,[[["u128"]]]],[11,R[14],E,E,1,[[[R[31]]],[[R[17],["error"]],["error"]]]],[11,R[35],E,E,2,[[["str"]],[R[17]]]],[11,R[35],E,E,3,[[["str"]],[[R[17],["error"]],["error"]]]],[11,"add",E,E,2,[[[R[25]]]]],[11,"add",E,E,2,[[[R[25]]]]],[11,"add",E,E,2,[[["i8"]]]],[11,"add",E,E,2,[[["i8"]]]],[11,"add",E,E,2,[[["u8"]]]],[11,"add",E,E,2,[[["u8"]]]],[11,"add",E,E,2,[[["i16"]]]],[11,"add",E,E,2,[[["i16"]]]],[11,"add",E,E,2,[[["u16"]]]],[11,"add",E,E,2,[[["u16"]]]],[11,"add",E,E,2,[[["i32"]]]],[11,"add",E,E,2,[[["i32"]]]],[11,"add",E,E,2,[[["u32"]]]],[11,"add",E,E,2,[[["u32"]]]],[11,"add",E,E,2,[[["i64"]]]],[11,"add",E,E,2,[[["i64"]]]],[11,"add",E,E,2,[[["u64"]]]],[11,"add",E,E,2,[[["u64"]]]],[11,"add",E,E,2,[[["i128"]]]],[11,"add",E,E,2,[[["i128"]]]],[11,"add",E,E,2,[[["u128"]]]],[11,"add",E,E,2,[[["u128"]]]],[11,"mul",E,E,2,[[[R[25]]]]],[11,"mul",E,E,2,[[[R[25]]]]],[11,"mul",E,E,2,[[["i8"]]]],[11,"mul",E,E,2,[[["i8"]]]],[11,"mul",E,E,2,[[["u8"]]]],[11,"mul",E,E,2,[[["u8"]]]],[11,"mul",E,E,2,[[["i16"]]]],[11,"mul",E,E,2,[[["i16"]]]],[11,"mul",E,E,2,[[["u16"]]]],[11,"mul",E,E,2,[[["u16"]]]],[11,"mul",E,E,2,[[["i32"]]]],[11,"mul",E,E,2,[[["i32"]]]],[11,"mul",E,E,2,[[["u32"]]]],[11,"mul",E,E,2,[[["u32"]]]],[11,"mul",E,E,2,[[["i64"]]]],[11,"mul",E,E,2,[[["i64"]]]],[11,"mul",E,E,2,[[["u64"]]]],[11,"mul",E,E,2,[[["u64"]]]],[11,"mul",E,E,2,[[["i128"]]]],[11,"mul",E,E,2,[[["i128"]]]],[11,"mul",E,E,2,[[["u128"]]]],[11,"mul",E,E,2,[[["u128"]]]],[11,"neg",E,E,2,[[]]],[11,R[36],E,E,2,[[[R[25]],["self"]]]],[11,R[36],E,E,2,[[["self"],[R[25]]]]],[11,R[36],E,E,2,[[["self"],["i8"]]]],[11,R[36],E,E,2,[[["self"],["i8"]]]],[11,R[36],E,E,2,[[["self"],["u8"]]]],[11,R[36],E,E,2,[[["self"],["u8"]]]],[11,R[36],E,E,2,[[["self"],["i16"]]]],[11,R[36],E,E,2,[[["self"],["i16"]]]],[11,R[36],E,E,2,[[["u16"],["self"]]]],[11,R[36],E,E,2,[[["u16"],["self"]]]],[11,R[36],E,E,2,[[["self"],["i32"]]]],[11,R[36],E,E,2,[[["self"],["i32"]]]],[11,R[36],E,E,2,[[["self"],["u32"]]]],[11,R[36],E,E,2,[[["self"],["u32"]]]],[11,R[36],E,E,2,[[["i64"],["self"]]]],[11,R[36],E,E,2,[[["i64"],["self"]]]],[11,R[36],E,E,2,[[["self"],["u64"]]]],[11,R[36],E,E,2,[[["self"],["u64"]]]],[11,R[36],E,E,2,[[["self"],["i128"]]]],[11,R[36],E,E,2,[[["self"],["i128"]]]],[11,R[36],E,E,2,[[["self"],["u128"]]]],[11,R[36],E,E,2,[[["self"],["u128"]]]],[11,R[37],E,E,2,[[[R[25]],["self"]]]],[11,R[37],E,E,2,[[["self"],[R[25]]]]],[11,R[37],E,E,2,[[["self"],["i8"]]]],[11,R[37],E,E,2,[[["self"],["i8"]]]],[11,R[37],E,E,2,[[["self"],["u8"]]]],[11,R[37],E,E,2,[[["self"],["u8"]]]],[11,R[37],E,E,2,[[["self"],["i16"]]]],[11,R[37],E,E,2,[[["self"],["i16"]]]],[11,R[37],E,E,2,[[["u16"],["self"]]]],[11,R[37],E,E,2,[[["u16"],["self"]]]],[11,R[37],E,E,2,[[["self"],["i32"]]]],[11,R[37],E,E,2,[[["self"],["i32"]]]],[11,R[37],E,E,2,[[["self"],["u32"]]]],[11,R[37],E,E,2,[[["self"],["u32"]]]],[11,R[37],E,E,2,[[["i64"],["self"]]]],[11,R[37],E,E,2,[[["i64"],["self"]]]],[11,R[37],E,E,2,[[["self"],["u64"]]]],[11,R[37],E,E,2,[[["self"],["u64"]]]],[11,R[37],E,E,2,[[["self"],["i128"]]]],[11,R[37],E,E,2,[[["self"],["i128"]]]],[11,R[37],E,E,2,[[["self"],["u128"]]]],[11,R[37],E,E,2,[[["self"],["u128"]]]],[11,R[38],E,E,2,[[[R[25]],["self"]]]],[11,R[38],E,E,2,[[["self"],[R[25]]]]],[11,R[38],E,E,2,[[["self"],["i8"]]]],[11,R[38],E,E,2,[[["self"],["i8"]]]],[11,R[38],E,E,2,[[["self"],["u8"]]]],[11,R[38],E,E,2,[[["self"],["u8"]]]],[11,R[38],E,E,2,[[["self"],["i16"]]]],[11,R[38],E,E,2,[[["self"],["i16"]]]],[11,R[38],E,E,2,[[["u16"],["self"]]]],[11,R[38],E,E,2,[[["u16"],["self"]]]],[11,R[38],E,E,2,[[["self"],["i32"]]]],[11,R[38],E,E,2,[[["self"],["i32"]]]],[11,R[38],E,E,2,[[["self"],["u32"]]]],[11,R[38],E,E,2,[[["self"],["u32"]]]],[11,R[38],E,E,2,[[["i64"],["self"]]]],[11,R[38],E,E,2,[[["i64"],["self"]]]],[11,R[38],E,E,2,[[["self"],["u64"]]]],[11,R[38],E,E,2,[[["self"],["u64"]]]],[11,R[38],E,E,2,[[["self"],["i128"]]]],[11,R[38],E,E,2,[[["self"],["i128"]]]],[11,R[38],E,E,2,[[["self"],["u128"]]]],[11,R[38],E,E,2,[[["self"],["u128"]]]],[11,R[39],E,E,2,[[[R[25]],["self"]]]],[11,R[39],E,E,2,[[["self"],[R[25]]]]],[11,R[39],E,E,2,[[["self"],["i8"]]]],[11,R[39],E,E,2,[[["self"],["i8"]]]],[11,R[39],E,E,2,[[["self"],["u8"]]]],[11,R[39],E,E,2,[[["self"],["u8"]]]],[11,R[39],E,E,2,[[["self"],["i16"]]]],[11,R[39],E,E,2,[[["self"],["i16"]]]],[11,R[39],E,E,2,[[["u16"],["self"]]]],[11,R[39],E,E,2,[[["u16"],["self"]]]],[11,R[39],E,E,2,[[["self"],["i32"]]]],[11,R[39],E,E,2,[[["self"],["i32"]]]],[11,R[39],E,E,2,[[["self"],["u32"]]]],[11,R[39],E,E,2,[[["self"],["u32"]]]],[11,R[39],E,E,2,[[["i64"],["self"]]]],[11,R[39],E,E,2,[[["i64"],["self"]]]],[11,R[39],E,E,2,[[["self"],["u64"]]]],[11,R[39],E,E,2,[[["self"],["u64"]]]],[11,R[39],E,E,2,[[["self"],["i128"]]]],[11,R[39],E,E,2,[[["self"],["i128"]]]],[11,R[39],E,E,2,[[["self"],["u128"]]]],[11,R[39],E,E,2,[[["self"],["u128"]]]],[11,R[40],E,E,2,[[[R[25]],["self"]]]],[11,R[40],E,E,2,[[["self"],[R[25]]]]],[11,R[40],E,E,2,[[["self"],["i8"]]]],[11,R[40],E,E,2,[[["self"],["i8"]]]],[11,R[40],E,E,2,[[["self"],["u8"]]]],[11,R[40],E,E,2,[[["self"],["u8"]]]],[11,R[40],E,E,2,[[["self"],["i16"]]]],[11,R[40],E,E,2,[[["self"],["i16"]]]],[11,R[40],E,E,2,[[["u16"],["self"]]]],[11,R[40],E,E,2,[[["u16"],["self"]]]],[11,R[40],E,E,2,[[["self"],["i32"]]]],[11,R[40],E,E,2,[[["self"],["i32"]]]],[11,R[40],E,E,2,[[["self"],["u32"]]]],[11,R[40],E,E,2,[[["self"],["u32"]]]],[11,R[40],E,E,2,[[["i64"],["self"]]]],[11,R[40],E,E,2,[[["i64"],["self"]]]],[11,R[40],E,E,2,[[["self"],["u64"]]]],[11,R[40],E,E,2,[[["self"],["u64"]]]],[11,R[40],E,E,2,[[["self"],["i128"]]]],[11,R[40],E,E,2,[[["self"],["i128"]]]],[11,R[40],E,E,2,[[["self"],["u128"]]]],[11,R[40],E,E,2,[[["self"],["u128"]]]]],"p":[[4,"Error"],[4,R[41]],[3,"Integer"],[3,R[42]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);