var searchIndex={};
searchIndex["imath_sys"] = {"doc":"","i":[[3,"mpz_t","imath_sys","",null,null],[12,"single","","",0,null],[12,"digits","","",0,null],[12,"alloc","","",0,null],[12,"used","","",0,null],[12,"sign","","",0,null],[3,"mpq_t","","",null,null],[12,"num","","",1,null],[12,"den","","",1,null],[7,"MP_OK","","",null,null],[7,"MP_FALSE","","",null,null],[7,"MP_TRUE","","",null,null],[7,"MP_MEMORY","","",null,null],[7,"MP_RANGE","","",null,null],[7,"MP_UNDEF","","",null,null],[7,"MP_TRUNC","","",null,null],[7,"MP_BADARG","","",null,null],[7,"MP_MINERR","","",null,null],[5,"mp_int_default_precision","","Sets the default number of digits allocated to an `mp_int`…",null,null],[5,"mp_int_multiply_threshold","","Sets the number of digits below which multiplication will…",null,null],[7,"MP_NEG","","",null,null],[7,"MP_ZPOS","","",null,null],[5,"mp_int_init","","Initializes `z` with 1-digit precision and sets it to…",null,null],[5,"mp_int_alloc","","Allocates a fresh zero-valued `mpz_t` on the heap,…",null,null],[5,"mp_int_init_size","","Initializes `z` with at least `prec` digits of storage,…",null,null],[5,"mp_int_init_copy","","Initializes `z` to be a copy of an already-initialized…",null,null],[5,"mp_int_init_value","","Initializes `z` to the specified signed `value` at default…",null,null],[5,"mp_int_init_uvalue","","Initializes `z` to the specified unsigned `value` at…",null,null],[5,"mp_int_set_value","","Sets `z` to the value of the specified signed `value`.",null,null],[5,"mp_int_set_uvalue","","Sets `z` to the value of the specified unsigned `value`.",null,null],[5,"mp_int_clear","","Releases the storage used by `z`.",null,null],[5,"mp_int_free","","Releases the storage used by `z` and also `z` itself. This…",null,null],[5,"mp_int_copy","","Replaces the value of `c` with a copy of the value of `a`.…",null,null],[5,"mp_int_swap","","Swaps the values and storage between `a` and `c`.",null,null],[5,"mp_int_zero","","Sets `z` to zero. The allocated storage of `z` is not…",null,null],[5,"mp_int_abs","","Sets `c` to the absolute value of `a`.",null,null],[5,"mp_int_neg","","Sets `c` to the additive inverse (negation) of `a`.",null,null],[5,"mp_int_add","","Sets `c` to the sum of `a` and `b`.",null,null],[5,"mp_int_add_value","","Sets `c` to the sum of `a` and `value`.",null,null],[5,"mp_int_sub","","Sets `c` to the difference of `a` less `b`.",null,null],[5,"mp_int_sub_value","","Sets `c` to the difference of `a` less `value`.",null,null],[5,"mp_int_mul","","Sets `c` to the product of `a` and `b`.",null,null],[5,"mp_int_mul_value","","Sets `c` to the product of `a` and `value`.",null,null],[5,"mp_int_mul_pow2","","Sets `c` to the product of `a` and `2^p2`. Requires `p2 >=…",null,null],[5,"mp_int_sqr","","Sets `c` to the square of `a`.",null,null],[5,"mp_int_div","","Sets `q` and `r` to the quotent and remainder of `a / b`.…",null,null],[5,"mp_int_div_value","","Sets `q` and `*r` to the quotent and remainder of `a /…",null,null],[5,"mp_int_div_pow2","","Sets `q` and `r` to the quotient and remainder of `a /…",null,null],[5,"mp_int_mod","","Sets `c` to the remainder of `a / m`. The remainder is…",null,null],[5,"mp_int_expt","","Sets `c` to the value of `a` raised to the `b` power. It…",null,null],[5,"mp_int_expt_value","","Sets `c` to the value of `a` raised to the `b` power. It…",null,null],[5,"mp_int_expt_full","","Sets `c` to the value of `a` raised to the `b` power. It…",null,null],[5,"mp_int_compare","","Returns the comparator of `a` and `b`.",null,null],[5,"mp_int_compare_unsigned","","Returns the comparator of the magnitudes of `a` and `b`,…",null,null],[5,"mp_int_compare_zero","","Returns the comparator of `z` and zero.",null,null],[5,"mp_int_compare_value","","Returns the comparator of `z` and the signed value `v`.",null,null],[5,"mp_int_compare_uvalue","","Returns the comparator of `z` and the unsigned value `uv`.",null,null],[5,"mp_int_divisible_value","","Reports whether `a` is divisible by `v`.",null,null],[5,"mp_int_is_pow2","","Returns `k >= 0` such that `z` is `2^k`, if such a `k`…",null,null],[5,"mp_int_exptmod","","Sets `c` to the value of `a` raised to the `b` power,…",null,null],[5,"mp_int_exptmod_evalue","","Sets `c` to the value of `a` raised to the `value` power,…",null,null],[5,"mp_int_exptmod_bvalue","","Sets `c` to the value of `value` raised to the `b` power,…",null,null],[5,"mp_int_exptmod_known","","Sets `c` to the value of `a` raised to the `b` power,…",null,null],[5,"mp_int_redux_const","","Sets `c` to the reduction constant for Barrett reduction…",null,null],[5,"mp_int_invmod","","Sets `c` to the multiplicative inverse of `a` modulo `m`,…",null,null],[5,"mp_int_gcd","","Sets `c` to the greatest common divisor of `a` and `b`.",null,null],[5,"mp_int_egcd","","Sets `c` to the greatest common divisor of `a` and `b`,…",null,null],[5,"mp_int_lcm","","Sets `c` to the least common multiple of `a` and `b`.",null,null],[5,"mp_int_root","","Sets `c` to the greatest integer not less than the `b`th…",null,null],[5,"mp_int_to_int","","Returns `MP_OK` if `z` is representable as `mp_small`,…",null,null],[5,"mp_int_to_uint","","Returns `MP_OK` if `z` is representable as `mp_usmall`, or…",null,null],[5,"mp_int_to_string","","Converts `z` to a zero-terminated string of characters in…",null,null],[5,"mp_int_string_len","","Reports the minimum number of characters required to…",null,null],[5,"mp_int_read_string","","Reads a string of ASCII digits in the specified `radix`…",null,null],[5,"mp_int_read_cstring","","Reads a string of ASCII digits in the specified `radix`…",null,null],[5,"mp_int_count_bits","","Returns the number of significant bits in `z`.",null,null],[5,"mp_int_to_binary","","Converts `z` to 2's complement binary, writing at most…",null,null],[5,"mp_int_read_binary","","Reads a 2's complement binary value from `buf` into `z`,…",null,null],[5,"mp_int_binary_len","","Returns the number of bytes to represent `z` in 2's…",null,null],[5,"mp_int_to_unsigned","","Converts the magnitude of `z` to unsigned binary, writing…",null,null],[5,"mp_int_read_unsigned","","Reads an unsigned binary value from `buf` into `z`, where…",null,null],[5,"mp_int_unsigned_len","","Returns the number of bytes required to represent `z` as…",null,null],[5,"mp_error_string","","Returns a pointer to a brief, human-readable,…",null,null],[5,"mp_rat_init","","Initializes `r` with 1-digit precision and sets it to…",null,null],[5,"mp_rat_alloc","","Allocates a fresh zero-valued `mpq_t` on the heap,…",null,null],[5,"mp_rat_reduce","","Reduces `r` in-place to lowest terms and canonical form.",null,null],[5,"mp_rat_init_size","","Initializes `r` with at least `n_prec` digits of storage…",null,null],[5,"mp_rat_init_copy","","Initializes `r` to be a copy of an already-initialized…",null,null],[5,"mp_rat_set_value","","Sets the value of `r` to the ratio of signed `numer` to…",null,null],[5,"mp_rat_set_uvalue","","Sets the value of `r` to the ratio of unsigned `numer` to…",null,null],[5,"mp_rat_clear","","Releases the storage used by `r`.",null,null],[5,"mp_rat_free","","Releases the storage used by `r` and also `r` itself. This…",null,null],[5,"mp_rat_numer","","Sets `z` to a copy of the numerator of `r`.",null,null],[5,"mp_rat_numer_ref","","Returns a pointer to the numerator of `r`.",null,null],[5,"mp_rat_denom","","Sets `z` to a copy of the denominator of `r`.",null,null],[5,"mp_rat_denom_ref","","Returns a pointer to the denominator of `r`.",null,null],[5,"mp_rat_sign","","Reports the sign of `r`.",null,null],[5,"mp_rat_copy","","Sets `c` to a copy of the value of `a`. No new memory is…",null,null],[5,"mp_rat_zero","","Sets `r` to zero. The allocated storage of `r` is not…",null,null],[5,"mp_rat_abs","","Sets `c` to the absolute value of `a`.",null,null],[5,"mp_rat_neg","","Sets `c` to the absolute value of `a`.",null,null],[5,"mp_rat_recip","","Sets `c` to the reciprocal of `a` if the reciprocal is…",null,null],[5,"mp_rat_add","","Sets `c` to the sum of `a` and `b`.",null,null],[5,"mp_rat_sub","","Sets `c` to the difference of `a` less `b`.",null,null],[5,"mp_rat_mul","","Sets `c` to the product of `a` and `b`.",null,null],[5,"mp_rat_div","","Sets `c` to the ratio `a / b` if that ratio is defined. It…",null,null],[5,"mp_rat_add_int","","Sets `c` to the sum of `a` and integer `b`.",null,null],[5,"mp_rat_sub_int","","Sets `c` to the difference of `a` less integer `b`.",null,null],[5,"mp_rat_mul_int","","Sets `c` to the product of `a` and integer `b`.",null,null],[5,"mp_rat_div_int","","Sets `c` to the ratio `a / b` if that ratio is defined. It…",null,null],[5,"mp_rat_expt","","Sets `c` to the value of `a` raised to the `b` power. It…",null,null],[5,"mp_rat_compare","","Returns the comparator of `a` and `b`.",null,null],[5,"mp_rat_compare_unsigned","","Returns the comparator of the magnitudes of `a` and `b`,…",null,null],[5,"mp_rat_compare_zero","","Returns the comparator of `r` and zero.",null,null],[5,"mp_rat_compare_value","","Returns the comparator of `r` and the signed ratio `n /…",null,null],[5,"mp_rat_is_integer","","Reports whether `r` is an integer, having canonical…",null,null],[5,"mp_rat_to_ints","","Reports whether the numerator and denominator of `r` can…",null,null],[5,"mp_rat_to_string","","Converts `r` to a zero-terminated string of the format…",null,null],[5,"mp_rat_to_decimal","","Converts the value of `r` to a string in decimal-point…",null,null],[5,"mp_rat_string_len","","Reports the minimum number of characters required to…",null,null],[5,"mp_rat_decimal_len","","Reports the length in bytes of the buffer needed to…",null,null],[5,"mp_rat_read_string","","Sets `r` to the value represented by a zero-terminated…",null,null],[5,"mp_rat_read_cstring","","Sets `r` to the value represented by a zero-terminated…",null,null],[5,"mp_rat_read_ustring","","Sets `r` to the value represented by a zero-terminated…",null,null],[5,"mp_rat_read_decimal","","Sets `r` to the value represented by a zero-terminated…",null,null],[5,"mp_rat_read_cdecimal","","Sets `r` to the value represented by a zero-terminated…",null,null],[5,"mp_int_is_prime","","",null,null],[5,"mp_int_find_prime","","",null,null],[6,"__uint32_t","","",null,null],[6,"__uint64_t","","",null,null],[6,"mp_sign","","",null,null],[6,"mp_size","","",null,null],[6,"mp_result","","",null,null],[6,"mp_small","","",null,null],[6,"mp_usmall","","",null,null],[6,"mp_digit","","",null,null],[6,"mp_word","","",null,null],[6,"mp_int","","",null,null],[6,"mp_rat","","",null,null],[6,"mp_round_mode","","",null,null],[17,"MP_MIN_RADIX","","",null,null],[17,"MP_MAX_RADIX","","",null,null],[17,"mp_round_mode_MP_ROUND_DOWN","","",null,null],[17,"mp_round_mode_MP_ROUND_HALF_UP","","",null,null],[17,"mp_round_mode_MP_ROUND_UP","","",null,null],[17,"mp_round_mode_MP_ROUND_HALF_DOWN","","",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["mpz_t"]]],[11,"clone","","",1,[[["self"]],["mpq_t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"p":[[3,"mpz_t"],[3,"mpq_t"]]};
searchIndex["reckoner"] = {"doc":"Arbitrary precision integer and rational arithmetic…","i":[[3,"Integer","reckoner","Multiple precision integer value.",null,null],[3,"Rational","","Multiple precision rational value.",null,null],[4,"Error","","Error used in `reckoner`, usually originating from…",null,null],[13,"StringReprContainedNul","","When converting from a string representation, the given…",0,null],[13,"ReadStringTruncated","","An error occurred when converting a string to a value, and…",0,null],[13,"RemainderOutsideBounds","","The result of a remainder operation was outside the…",0,null],[13,"ConversionOutsideRange","","Could not convert a value to a primitive integer type…",0,null],[13,"IntParseFailed","","Integer parse failed.",0,null],[13,"NoErrorPossible","","It impossible for this error to occur.",0,null],[13,"UnknownRoundingMode","","Unknown value for an imath rounding mode.",0,null],[13,"IMath","","Internal error from `imath_sys`.",0,null],[12,"code","reckoner::Error","Internal `imath_sys` error code.",0,null],[12,"msg","","Custom message to display.",0,null],[13,"NotCanonicalInteger","reckoner","The rational value is not a canonical integer, in the form…",0,null],[4,"RoundMode","","as a decimal value. There are four rounding modes…",null,null],[13,"Down","","Truncates the value toward zero.",1,null],[13,"Up","","Rounds the value away from zero.",1,null],[13,"HalfUp","","Rounds the value to nearest digit, half rounds upward.",1,null],[13,"HalfDown","","Rounds the value to nearest digit, half goes toward zero.",1,null],[11,"add","","Add two integers and return the result",2,[[["self"]],["self"]]],[11,"add_assign","","Add two integers and assign the result to self",2,[[["self"],["self"]]]],[11,"subtract","","Subtract two integers and return the result",2,[[["self"]],["self"]]],[11,"subtract_assign","","Subtract two integers and assign the result to self",2,[[["self"],["self"]]]],[11,"multiply","","Multiply two integers and return the result",2,[[["self"]],["self"]]],[11,"multiply_assign","","Multiply two integers and assign the result to self",2,[[["self"],["self"]]]],[11,"negate","","Return the additive inverse",2,[[["self"]],["self"]]],[11,"negate_assign","","Assign the additive inverse to self",2,[[["self"]]]],[11,"absolute_value","","Return the absolute value",2,[[["self"]],["self"]]],[11,"absolute_value_assign","","Assign the absolute value to self",2,[[["self"]]]],[11,"divide_full","","Divide two integers and return quotient and remainder",2,[[["self"]]]],[11,"divide","","Divide two integers and return only quotient",2,[[["self"]],["self"]]],[11,"divide_assign","","Divide two integers and assign the result to self",2,[[["self"],["self"]]]],[11,"remainder","","Divide two integers and return only remainder",2,[[["self"]],["self"]]],[11,"remainder_assign","","Divide two integers and assign the remainder to self",2,[[["self"],["self"]]]],[11,"new","","Construct a new integer with a default value of zero.",2,[[],["self"]]],[11,"from_raw","","Construct an Integer from a raw non-null pointer to…",2,[[],["self"]]],[11,"into_raw","","Consumes the Integer, returning a wrapped raw pointer.",2,[[["integer"]]]],[11,"copy_to","","Replaces the value of `other` with a copy of the value of…",2,[[["self"],["self"]]]],[11,"zero","","Set value of integer to zero",2,[[["self"]]]],[11,"compare","","Compare two integers",2,[[["self"]],["ordering"]]],[11,"compare_magnitude","","Compare the magnitude of two integers, not taking sign…",2,[[["self"]],["ordering"]]],[11,"compare_zero","","Compare an integer to zero.",2,[[["self"]],["ordering"]]],[11,"add","","Add two rational values and return the result.",3,[[["self"]],["self"]]],[11,"add_integer","","Add a rational value and an integer value and return the…",3,[[["integer"],["self"]],["self"]]],[11,"add_assign","","Add two rationals and assign the result to self.",3,[[["self"],["self"]]]],[11,"add_assign_integer","","Add a rational value and an integer value and assign the…",3,[[["self"],["integer"]]]],[11,"subtract","","Subtract two rational values and return the result.",3,[[["self"]],["self"]]],[11,"subtract_integer","","Subtract a rational value and an integer value and return…",3,[[["integer"],["self"]],["self"]]],[11,"subtract_assign","","Subtract two rationals and assign the result to self.",3,[[["self"],["self"]]]],[11,"subtract_assign_integer","","Subtract a rational value and an integer value and assign…",3,[[["self"],["integer"]]]],[11,"multiply","","Multiply two rational values and return the result.",3,[[["self"]],["self"]]],[11,"multiply_integer","","Multiply a rational value and an integer value and return…",3,[[["integer"],["self"]],["self"]]],[11,"multiply_assign","","Multiply two rationals and assign the result to self.",3,[[["self"],["self"]]]],[11,"multiply_assign_integer","","Multiply a rational value and an integer value and assign…",3,[[["self"],["integer"]]]],[11,"divide","","Divide two rational values and return the result.",3,[[["self"]],["self"]]],[11,"divide_integer","","Divide a rational value and an integer value and return…",3,[[["integer"],["self"]],["self"]]],[11,"divide_assign","","Divide two rationals and assign the result to self.",3,[[["self"],["self"]]]],[11,"divide_assign_integer","","Divide a rational value and an integer value and assign…",3,[[["self"],["integer"]]]],[11,"absolute_value","","Return the absolute value",3,[[["self"]],["self"]]],[11,"absolute_value_assign","","Assign the absolute value to self",3,[[["self"]]]],[11,"negate","","Return the additive inverse",3,[[["self"]],["self"]]],[11,"negate_assign","","Assign the additive inverse to self",3,[[["self"]]]],[11,"reciprocal","","Return the multiplicative inverse",3,[[["self"]],["self"]]],[11,"reciprocal_assign","","Assign the multiplicative inverse to self",3,[[["self"]]]],[11,"new","","Create a new rational with a default value of zero (0/1).",3,[[],["self"]]],[11,"from_raw","","Construct a Rational from a raw non-null pointer to…",3,[[],["self"]]],[11,"into_raw","","Consumes the Rational, returning a wrapped raw pointer.",3,[[["rational"]]]],[11,"reduce","","Reduces `r` in-place to lowest terms and canonical form.",3,[[["self"]]]],[11,"zero","","Set value of integer to zero",3,[[["self"]]]],[11,"is_integer","","Returns true if the denominator is 1.",3,[[["self"]],["bool"]]],[11,"compare","","Compare two rationals",3,[[["self"]],["ordering"]]],[11,"compare_magnitude","","Compare the magnitude of two rationals, not taking sign…",3,[[["self"]],["ordering"]]],[11,"compare_zero","","Compare a rational to zero.",3,[[["self"]],["ordering"]]],[11,"numerator","","Return a copy of the numerator of the rational value",3,[[["self"]],["integer"]]],[11,"denominator","","Return a copy of the denominator of the rational value",3,[[["self"]],["integer"]]],[11,"copy_to","","Replaces the value of `other` with a copy of the value of…",3,[[["self"],["self"]]]],[11,"to_decimal","","Converts the value of `self` to a string in base-10…",3,[[["roundmode"],["u16"],["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"drop","","",2,[[["self"]]]],[11,"drop","","",3,[[["self"]]]],[11,"from","","",0,[[["tryfrominterror"]],["self"]]],[11,"from","","",0,[[["infallible"]],["self"]]],[11,"from","","",0,[[["parseinterror"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["i128"]],["self"]]],[11,"from","","",2,[[["i128"]],["self"]]],[11,"from","","",2,[[["u128"]],["self"]]],[11,"from","","",2,[[["u128"]],["self"]]],[11,"from","","",3,[[["integer"]],["self"]]],[11,"from","","",3,[[["integer"]],["self"]]],[11,"from","","",3,[[],["self"]]],[11,"from","","",3,[[],["self"]]],[11,"from","","",3,[[],["self"]]],[11,"from","","",3,[[["i8"]],["self"]]],[11,"from","","",3,[[["i8"]],["self"]]],[11,"from","","",3,[[["u8"]],["self"]]],[11,"from","","",3,[[["u8"]],["self"]]],[11,"from","","",3,[[["i16"]],["self"]]],[11,"from","","",3,[[["i16"]],["self"]]],[11,"from","","",3,[[["u16"]],["self"]]],[11,"from","","",3,[[["u16"]],["self"]]],[11,"from","","",3,[[["i32"]],["self"]]],[11,"from","","",3,[[["i32"]],["self"]]],[11,"from","","",3,[[["u32"]],["self"]]],[11,"from","","",3,[[["u32"]],["self"]]],[11,"from","","",3,[[["i64"]],["self"]]],[11,"from","","",3,[[["i64"]],["self"]]],[11,"from","","",3,[[["u64"]],["self"]]],[11,"from","","",3,[[["u64"]],["self"]]],[11,"from","","",3,[[["i128"]],["self"]]],[11,"from","","",3,[[["i128"]],["self"]]],[11,"from","","",3,[[["u128"]],["self"]]],[11,"from","","",3,[[["u128"]],["self"]]],[11,"into","","",1,[[],["mp_round_mode"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone_from","","",2,[[["self"],["self"]]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone_from","","",3,[[["self"],["self"]]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["self"]]],[11,"cmp","","",2,[[["self"]],["ordering"]]],[11,"cmp","","",3,[[["self"]],["ordering"]]],[11,"eq","","",0,[[["error"],["self"]],["bool"]]],[11,"ne","","",0,[[["error"],["self"]],["bool"]]],[11,"eq","","",2,[[["integer"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["u8"]],["bool"]]],[11,"eq","","",2,[[["i8"],["self"]],["bool"]]],[11,"eq","","",2,[[["u16"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["i16"]],["bool"]]],[11,"eq","","",2,[[["self"],["i32"]],["bool"]]],[11,"eq","","",2,[[["u32"],["self"]],["bool"]]],[11,"eq","","",2,[[["i64"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["u64"]],["bool"]]],[11,"eq","","",2,[[["i128"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["u128"]],["bool"]]],[11,"eq","","",3,[[["self"],["rational"]],["bool"]]],[11,"eq","","",3,[[["integer"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["rational"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["u8"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["i8"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["u16"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["i16"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["i32"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["u32"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["i64"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["u64"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["i128"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["u128"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"partial_cmp","","",2,[[["integer"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["self"],["u8"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["i8"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["u16"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["self"],["i16"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["self"],["i32"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["u32"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["i64"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["self"],["u64"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["i128"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["self"],["u128"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"],["rational"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["integer"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["self"],["rational"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"],["u8"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["i8"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["u16"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"],["i16"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"],["i32"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["u32"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["i64"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"],["u64"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["i128"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"],["u128"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",3,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"div","","",2,[[["integer"]]]],[11,"div","","",2,[[["integer"]]]],[11,"div","","",2,[[["i8"]]]],[11,"div","","",2,[[["i8"]]]],[11,"div","","",2,[[["u8"]]]],[11,"div","","",2,[[["u8"]]]],[11,"div","","",2,[[["i16"]]]],[11,"div","","",2,[[["i16"]]]],[11,"div","","",2,[[["u16"]]]],[11,"div","","",2,[[["u16"]]]],[11,"div","","",2,[[["i32"]]]],[11,"div","","",2,[[["i32"]]]],[11,"div","","",2,[[["u32"]]]],[11,"div","","",2,[[["u32"]]]],[11,"div","","",2,[[["i64"]]]],[11,"div","","",2,[[["i64"]]]],[11,"div","","",2,[[["u64"]]]],[11,"div","","",2,[[["u64"]]]],[11,"div","","",2,[[["i128"]]]],[11,"div","","",2,[[["i128"]]]],[11,"div","","",2,[[["u128"]]]],[11,"div","","",2,[[["u128"]]]],[11,"div","","",3,[[["rational"]]]],[11,"div","","",3,[[["rational"]]]],[11,"div","","",3,[[["integer"]]]],[11,"div","","",3,[[["integer"]]]],[11,"div","","",2,[[["rational"]]]],[11,"div","","",2,[[["rational"]]]],[11,"div","","",3,[[["i8"]]]],[11,"div","","",3,[[["i8"]]]],[11,"div","","",3,[[["u8"]]]],[11,"div","","",3,[[["u8"]]]],[11,"div","","",3,[[["i16"]]]],[11,"div","","",3,[[["i16"]]]],[11,"div","","",3,[[["u16"]]]],[11,"div","","",3,[[["u16"]]]],[11,"div","","",3,[[["i32"]]]],[11,"div","","",3,[[["i32"]]]],[11,"div","","",3,[[["u32"]]]],[11,"div","","",3,[[["u32"]]]],[11,"div","","",3,[[["i64"]]]],[11,"div","","",3,[[["i64"]]]],[11,"div","","",3,[[["u64"]]]],[11,"div","","",3,[[["u64"]]]],[11,"div","","",3,[[["i128"]]]],[11,"div","","",3,[[["i128"]]]],[11,"div","","",3,[[["u128"]]]],[11,"div","","",3,[[["u128"]]]],[11,"rem","","",2,[[["integer"]]]],[11,"rem","","",2,[[["integer"]]]],[11,"rem","","",2,[[["i8"]]]],[11,"rem","","",2,[[["i8"]]]],[11,"rem","","",2,[[["u8"]]]],[11,"rem","","",2,[[["u8"]]]],[11,"rem","","",2,[[["i16"]]]],[11,"rem","","",2,[[["i16"]]]],[11,"rem","","",2,[[["u16"]]]],[11,"rem","","",2,[[["u16"]]]],[11,"rem","","",2,[[["i32"]]]],[11,"rem","","",2,[[["i32"]]]],[11,"rem","","",2,[[["u32"]]]],[11,"rem","","",2,[[["u32"]]]],[11,"rem","","",2,[[["i64"]]]],[11,"rem","","",2,[[["i64"]]]],[11,"rem","","",2,[[["u64"]]]],[11,"rem","","",2,[[["u64"]]]],[11,"rem","","",2,[[["i128"]]]],[11,"rem","","",2,[[["i128"]]]],[11,"rem","","",2,[[["u128"]]]],[11,"rem","","",2,[[["u128"]]]],[11,"sub","","",2,[[["integer"]]]],[11,"sub","","",2,[[["integer"]]]],[11,"sub","","",2,[[["i8"]]]],[11,"sub","","",2,[[["i8"]]]],[11,"sub","","",2,[[["u8"]]]],[11,"sub","","",2,[[["u8"]]]],[11,"sub","","",2,[[["i16"]]]],[11,"sub","","",2,[[["i16"]]]],[11,"sub","","",2,[[["u16"]]]],[11,"sub","","",2,[[["u16"]]]],[11,"sub","","",2,[[["i32"]]]],[11,"sub","","",2,[[["i32"]]]],[11,"sub","","",2,[[["u32"]]]],[11,"sub","","",2,[[["u32"]]]],[11,"sub","","",2,[[["i64"]]]],[11,"sub","","",2,[[["i64"]]]],[11,"sub","","",2,[[["u64"]]]],[11,"sub","","",2,[[["u64"]]]],[11,"sub","","",2,[[["i128"]]]],[11,"sub","","",2,[[["i128"]]]],[11,"sub","","",2,[[["u128"]]]],[11,"sub","","",2,[[["u128"]]]],[11,"sub","","",3,[[["rational"]]]],[11,"sub","","",3,[[["rational"]]]],[11,"sub","","",3,[[["integer"]]]],[11,"sub","","",3,[[["integer"]]]],[11,"sub","","",2,[[["rational"]]]],[11,"sub","","",2,[[["rational"]]]],[11,"sub","","",3,[[["i8"]]]],[11,"sub","","",3,[[["i8"]]]],[11,"sub","","",3,[[["u8"]]]],[11,"sub","","",3,[[["u8"]]]],[11,"sub","","",3,[[["i16"]]]],[11,"sub","","",3,[[["i16"]]]],[11,"sub","","",3,[[["u16"]]]],[11,"sub","","",3,[[["u16"]]]],[11,"sub","","",3,[[["i32"]]]],[11,"sub","","",3,[[["i32"]]]],[11,"sub","","",3,[[["u32"]]]],[11,"sub","","",3,[[["u32"]]]],[11,"sub","","",3,[[["i64"]]]],[11,"sub","","",3,[[["i64"]]]],[11,"sub","","",3,[[["u64"]]]],[11,"sub","","",3,[[["u64"]]]],[11,"sub","","",3,[[["i128"]]]],[11,"sub","","",3,[[["i128"]]]],[11,"sub","","",3,[[["u128"]]]],[11,"sub","","",3,[[["u128"]]]],[11,"try_from","","",2,[[["rational"]],["result"]]],[11,"try_from","","",2,[[["rational"]],["result"]]],[11,"try_from","","",1,[[["mp_round_mode"]],[["result",["error"]],["error"]]]],[11,"from_str","","",2,[[["str"]],["result"]]],[11,"from_str","","",3,[[["str"]],[["result",["error"]],["error"]]]],[11,"add","","",2,[[["integer"]]]],[11,"add","","",2,[[["integer"]]]],[11,"add","","",2,[[["i8"]]]],[11,"add","","",2,[[["i8"]]]],[11,"add","","",2,[[["u8"]]]],[11,"add","","",2,[[["u8"]]]],[11,"add","","",2,[[["i16"]]]],[11,"add","","",2,[[["i16"]]]],[11,"add","","",2,[[["u16"]]]],[11,"add","","",2,[[["u16"]]]],[11,"add","","",2,[[["i32"]]]],[11,"add","","",2,[[["i32"]]]],[11,"add","","",2,[[["u32"]]]],[11,"add","","",2,[[["u32"]]]],[11,"add","","",2,[[["i64"]]]],[11,"add","","",2,[[["i64"]]]],[11,"add","","",2,[[["u64"]]]],[11,"add","","",2,[[["u64"]]]],[11,"add","","",2,[[["i128"]]]],[11,"add","","",2,[[["i128"]]]],[11,"add","","",2,[[["u128"]]]],[11,"add","","",2,[[["u128"]]]],[11,"add","","",3,[[["rational"]]]],[11,"add","","",3,[[["rational"]]]],[11,"add","","",3,[[["integer"]]]],[11,"add","","",3,[[["integer"]]]],[11,"add","","",2,[[["rational"]]]],[11,"add","","",2,[[["rational"]]]],[11,"add","","",3,[[["i8"]]]],[11,"add","","",3,[[["i8"]]]],[11,"add","","",3,[[["u8"]]]],[11,"add","","",3,[[["u8"]]]],[11,"add","","",3,[[["i16"]]]],[11,"add","","",3,[[["i16"]]]],[11,"add","","",3,[[["u16"]]]],[11,"add","","",3,[[["u16"]]]],[11,"add","","",3,[[["i32"]]]],[11,"add","","",3,[[["i32"]]]],[11,"add","","",3,[[["u32"]]]],[11,"add","","",3,[[["u32"]]]],[11,"add","","",3,[[["i64"]]]],[11,"add","","",3,[[["i64"]]]],[11,"add","","",3,[[["u64"]]]],[11,"add","","",3,[[["u64"]]]],[11,"add","","",3,[[["i128"]]]],[11,"add","","",3,[[["i128"]]]],[11,"add","","",3,[[["u128"]]]],[11,"add","","",3,[[["u128"]]]],[11,"mul","","",2,[[["integer"]]]],[11,"mul","","",2,[[["integer"]]]],[11,"mul","","",2,[[["i8"]]]],[11,"mul","","",2,[[["i8"]]]],[11,"mul","","",2,[[["u8"]]]],[11,"mul","","",2,[[["u8"]]]],[11,"mul","","",2,[[["i16"]]]],[11,"mul","","",2,[[["i16"]]]],[11,"mul","","",2,[[["u16"]]]],[11,"mul","","",2,[[["u16"]]]],[11,"mul","","",2,[[["i32"]]]],[11,"mul","","",2,[[["i32"]]]],[11,"mul","","",2,[[["u32"]]]],[11,"mul","","",2,[[["u32"]]]],[11,"mul","","",2,[[["i64"]]]],[11,"mul","","",2,[[["i64"]]]],[11,"mul","","",2,[[["u64"]]]],[11,"mul","","",2,[[["u64"]]]],[11,"mul","","",2,[[["i128"]]]],[11,"mul","","",2,[[["i128"]]]],[11,"mul","","",2,[[["u128"]]]],[11,"mul","","",2,[[["u128"]]]],[11,"mul","","",3,[[["rational"]]]],[11,"mul","","",3,[[["rational"]]]],[11,"mul","","",3,[[["integer"]]]],[11,"mul","","",3,[[["integer"]]]],[11,"mul","","",2,[[["rational"]]]],[11,"mul","","",2,[[["rational"]]]],[11,"mul","","",3,[[["i8"]]]],[11,"mul","","",3,[[["i8"]]]],[11,"mul","","",3,[[["u8"]]]],[11,"mul","","",3,[[["u8"]]]],[11,"mul","","",3,[[["i16"]]]],[11,"mul","","",3,[[["i16"]]]],[11,"mul","","",3,[[["u16"]]]],[11,"mul","","",3,[[["u16"]]]],[11,"mul","","",3,[[["i32"]]]],[11,"mul","","",3,[[["i32"]]]],[11,"mul","","",3,[[["u32"]]]],[11,"mul","","",3,[[["u32"]]]],[11,"mul","","",3,[[["i64"]]]],[11,"mul","","",3,[[["i64"]]]],[11,"mul","","",3,[[["u64"]]]],[11,"mul","","",3,[[["u64"]]]],[11,"mul","","",3,[[["i128"]]]],[11,"mul","","",3,[[["i128"]]]],[11,"mul","","",3,[[["u128"]]]],[11,"mul","","",3,[[["u128"]]]],[11,"neg","","",2,[[]]],[11,"neg","","",3,[[]]],[11,"add_assign","","",2,[[["integer"],["self"]]]],[11,"add_assign","","",2,[[["self"],["integer"]]]],[11,"add_assign","","",2,[[["self"],["i8"]]]],[11,"add_assign","","",2,[[["self"],["i8"]]]],[11,"add_assign","","",2,[[["self"],["u8"]]]],[11,"add_assign","","",2,[[["self"],["u8"]]]],[11,"add_assign","","",2,[[["self"],["i16"]]]],[11,"add_assign","","",2,[[["self"],["i16"]]]],[11,"add_assign","","",2,[[["u16"],["self"]]]],[11,"add_assign","","",2,[[["u16"],["self"]]]],[11,"add_assign","","",2,[[["self"],["i32"]]]],[11,"add_assign","","",2,[[["self"],["i32"]]]],[11,"add_assign","","",2,[[["self"],["u32"]]]],[11,"add_assign","","",2,[[["self"],["u32"]]]],[11,"add_assign","","",2,[[["i64"],["self"]]]],[11,"add_assign","","",2,[[["i64"],["self"]]]],[11,"add_assign","","",2,[[["self"],["u64"]]]],[11,"add_assign","","",2,[[["self"],["u64"]]]],[11,"add_assign","","",2,[[["self"],["i128"]]]],[11,"add_assign","","",2,[[["self"],["i128"]]]],[11,"add_assign","","",2,[[["self"],["u128"]]]],[11,"add_assign","","",2,[[["self"],["u128"]]]],[11,"add_assign","","",3,[[["self"],["rational"]]]],[11,"add_assign","","",3,[[["self"],["rational"]]]],[11,"add_assign","","",3,[[["integer"],["self"]]]],[11,"add_assign","","",3,[[["self"],["integer"]]]],[11,"add_assign","","",3,[[["self"],["i8"]]]],[11,"add_assign","","",3,[[["self"],["i8"]]]],[11,"add_assign","","",3,[[["self"],["u8"]]]],[11,"add_assign","","",3,[[["self"],["u8"]]]],[11,"add_assign","","",3,[[["self"],["i16"]]]],[11,"add_assign","","",3,[[["self"],["i16"]]]],[11,"add_assign","","",3,[[["u16"],["self"]]]],[11,"add_assign","","",3,[[["u16"],["self"]]]],[11,"add_assign","","",3,[[["self"],["i32"]]]],[11,"add_assign","","",3,[[["self"],["i32"]]]],[11,"add_assign","","",3,[[["self"],["u32"]]]],[11,"add_assign","","",3,[[["self"],["u32"]]]],[11,"add_assign","","",3,[[["i64"],["self"]]]],[11,"add_assign","","",3,[[["i64"],["self"]]]],[11,"add_assign","","",3,[[["self"],["u64"]]]],[11,"add_assign","","",3,[[["self"],["u64"]]]],[11,"add_assign","","",3,[[["self"],["i128"]]]],[11,"add_assign","","",3,[[["self"],["i128"]]]],[11,"add_assign","","",3,[[["self"],["u128"]]]],[11,"add_assign","","",3,[[["self"],["u128"]]]],[11,"sub_assign","","",2,[[["integer"],["self"]]]],[11,"sub_assign","","",2,[[["self"],["integer"]]]],[11,"sub_assign","","",2,[[["self"],["i8"]]]],[11,"sub_assign","","",2,[[["self"],["i8"]]]],[11,"sub_assign","","",2,[[["self"],["u8"]]]],[11,"sub_assign","","",2,[[["self"],["u8"]]]],[11,"sub_assign","","",2,[[["self"],["i16"]]]],[11,"sub_assign","","",2,[[["self"],["i16"]]]],[11,"sub_assign","","",2,[[["u16"],["self"]]]],[11,"sub_assign","","",2,[[["u16"],["self"]]]],[11,"sub_assign","","",2,[[["self"],["i32"]]]],[11,"sub_assign","","",2,[[["self"],["i32"]]]],[11,"sub_assign","","",2,[[["self"],["u32"]]]],[11,"sub_assign","","",2,[[["self"],["u32"]]]],[11,"sub_assign","","",2,[[["i64"],["self"]]]],[11,"sub_assign","","",2,[[["i64"],["self"]]]],[11,"sub_assign","","",2,[[["self"],["u64"]]]],[11,"sub_assign","","",2,[[["self"],["u64"]]]],[11,"sub_assign","","",2,[[["self"],["i128"]]]],[11,"sub_assign","","",2,[[["self"],["i128"]]]],[11,"sub_assign","","",2,[[["self"],["u128"]]]],[11,"sub_assign","","",2,[[["self"],["u128"]]]],[11,"sub_assign","","",3,[[["self"],["rational"]]]],[11,"sub_assign","","",3,[[["self"],["rational"]]]],[11,"sub_assign","","",3,[[["integer"],["self"]]]],[11,"sub_assign","","",3,[[["self"],["integer"]]]],[11,"sub_assign","","",3,[[["self"],["i8"]]]],[11,"sub_assign","","",3,[[["self"],["i8"]]]],[11,"sub_assign","","",3,[[["self"],["u8"]]]],[11,"sub_assign","","",3,[[["self"],["u8"]]]],[11,"sub_assign","","",3,[[["self"],["i16"]]]],[11,"sub_assign","","",3,[[["self"],["i16"]]]],[11,"sub_assign","","",3,[[["u16"],["self"]]]],[11,"sub_assign","","",3,[[["u16"],["self"]]]],[11,"sub_assign","","",3,[[["self"],["i32"]]]],[11,"sub_assign","","",3,[[["self"],["i32"]]]],[11,"sub_assign","","",3,[[["self"],["u32"]]]],[11,"sub_assign","","",3,[[["self"],["u32"]]]],[11,"sub_assign","","",3,[[["i64"],["self"]]]],[11,"sub_assign","","",3,[[["i64"],["self"]]]],[11,"sub_assign","","",3,[[["self"],["u64"]]]],[11,"sub_assign","","",3,[[["self"],["u64"]]]],[11,"sub_assign","","",3,[[["self"],["i128"]]]],[11,"sub_assign","","",3,[[["self"],["i128"]]]],[11,"sub_assign","","",3,[[["self"],["u128"]]]],[11,"sub_assign","","",3,[[["self"],["u128"]]]],[11,"mul_assign","","",2,[[["integer"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["integer"]]]],[11,"mul_assign","","",2,[[["self"],["i8"]]]],[11,"mul_assign","","",2,[[["self"],["i8"]]]],[11,"mul_assign","","",2,[[["self"],["u8"]]]],[11,"mul_assign","","",2,[[["self"],["u8"]]]],[11,"mul_assign","","",2,[[["self"],["i16"]]]],[11,"mul_assign","","",2,[[["self"],["i16"]]]],[11,"mul_assign","","",2,[[["u16"],["self"]]]],[11,"mul_assign","","",2,[[["u16"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["i32"]]]],[11,"mul_assign","","",2,[[["self"],["i32"]]]],[11,"mul_assign","","",2,[[["self"],["u32"]]]],[11,"mul_assign","","",2,[[["self"],["u32"]]]],[11,"mul_assign","","",2,[[["i64"],["self"]]]],[11,"mul_assign","","",2,[[["i64"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["u64"]]]],[11,"mul_assign","","",2,[[["self"],["u64"]]]],[11,"mul_assign","","",2,[[["self"],["i128"]]]],[11,"mul_assign","","",2,[[["self"],["i128"]]]],[11,"mul_assign","","",2,[[["self"],["u128"]]]],[11,"mul_assign","","",2,[[["self"],["u128"]]]],[11,"mul_assign","","",3,[[["self"],["rational"]]]],[11,"mul_assign","","",3,[[["self"],["rational"]]]],[11,"mul_assign","","",3,[[["integer"],["self"]]]],[11,"mul_assign","","",3,[[["self"],["integer"]]]],[11,"mul_assign","","",3,[[["self"],["i8"]]]],[11,"mul_assign","","",3,[[["self"],["i8"]]]],[11,"mul_assign","","",3,[[["self"],["u8"]]]],[11,"mul_assign","","",3,[[["self"],["u8"]]]],[11,"mul_assign","","",3,[[["self"],["i16"]]]],[11,"mul_assign","","",3,[[["self"],["i16"]]]],[11,"mul_assign","","",3,[[["u16"],["self"]]]],[11,"mul_assign","","",3,[[["u16"],["self"]]]],[11,"mul_assign","","",3,[[["self"],["i32"]]]],[11,"mul_assign","","",3,[[["self"],["i32"]]]],[11,"mul_assign","","",3,[[["self"],["u32"]]]],[11,"mul_assign","","",3,[[["self"],["u32"]]]],[11,"mul_assign","","",3,[[["i64"],["self"]]]],[11,"mul_assign","","",3,[[["i64"],["self"]]]],[11,"mul_assign","","",3,[[["self"],["u64"]]]],[11,"mul_assign","","",3,[[["self"],["u64"]]]],[11,"mul_assign","","",3,[[["self"],["i128"]]]],[11,"mul_assign","","",3,[[["self"],["i128"]]]],[11,"mul_assign","","",3,[[["self"],["u128"]]]],[11,"mul_assign","","",3,[[["self"],["u128"]]]],[11,"div_assign","","",2,[[["integer"],["self"]]]],[11,"div_assign","","",2,[[["self"],["integer"]]]],[11,"div_assign","","",2,[[["self"],["i8"]]]],[11,"div_assign","","",2,[[["self"],["i8"]]]],[11,"div_assign","","",2,[[["self"],["u8"]]]],[11,"div_assign","","",2,[[["self"],["u8"]]]],[11,"div_assign","","",2,[[["self"],["i16"]]]],[11,"div_assign","","",2,[[["self"],["i16"]]]],[11,"div_assign","","",2,[[["u16"],["self"]]]],[11,"div_assign","","",2,[[["u16"],["self"]]]],[11,"div_assign","","",2,[[["self"],["i32"]]]],[11,"div_assign","","",2,[[["self"],["i32"]]]],[11,"div_assign","","",2,[[["self"],["u32"]]]],[11,"div_assign","","",2,[[["self"],["u32"]]]],[11,"div_assign","","",2,[[["i64"],["self"]]]],[11,"div_assign","","",2,[[["i64"],["self"]]]],[11,"div_assign","","",2,[[["self"],["u64"]]]],[11,"div_assign","","",2,[[["self"],["u64"]]]],[11,"div_assign","","",2,[[["self"],["i128"]]]],[11,"div_assign","","",2,[[["self"],["i128"]]]],[11,"div_assign","","",2,[[["self"],["u128"]]]],[11,"div_assign","","",2,[[["self"],["u128"]]]],[11,"div_assign","","",3,[[["self"],["rational"]]]],[11,"div_assign","","",3,[[["self"],["rational"]]]],[11,"div_assign","","",3,[[["integer"],["self"]]]],[11,"div_assign","","",3,[[["self"],["integer"]]]],[11,"div_assign","","",3,[[["self"],["i8"]]]],[11,"div_assign","","",3,[[["self"],["i8"]]]],[11,"div_assign","","",3,[[["self"],["u8"]]]],[11,"div_assign","","",3,[[["self"],["u8"]]]],[11,"div_assign","","",3,[[["self"],["i16"]]]],[11,"div_assign","","",3,[[["self"],["i16"]]]],[11,"div_assign","","",3,[[["u16"],["self"]]]],[11,"div_assign","","",3,[[["u16"],["self"]]]],[11,"div_assign","","",3,[[["self"],["i32"]]]],[11,"div_assign","","",3,[[["self"],["i32"]]]],[11,"div_assign","","",3,[[["self"],["u32"]]]],[11,"div_assign","","",3,[[["self"],["u32"]]]],[11,"div_assign","","",3,[[["i64"],["self"]]]],[11,"div_assign","","",3,[[["i64"],["self"]]]],[11,"div_assign","","",3,[[["self"],["u64"]]]],[11,"div_assign","","",3,[[["self"],["u64"]]]],[11,"div_assign","","",3,[[["self"],["i128"]]]],[11,"div_assign","","",3,[[["self"],["i128"]]]],[11,"div_assign","","",3,[[["self"],["u128"]]]],[11,"div_assign","","",3,[[["self"],["u128"]]]],[11,"rem_assign","","",2,[[["integer"],["self"]]]],[11,"rem_assign","","",2,[[["self"],["integer"]]]],[11,"rem_assign","","",2,[[["self"],["i8"]]]],[11,"rem_assign","","",2,[[["self"],["i8"]]]],[11,"rem_assign","","",2,[[["self"],["u8"]]]],[11,"rem_assign","","",2,[[["self"],["u8"]]]],[11,"rem_assign","","",2,[[["self"],["i16"]]]],[11,"rem_assign","","",2,[[["self"],["i16"]]]],[11,"rem_assign","","",2,[[["u16"],["self"]]]],[11,"rem_assign","","",2,[[["u16"],["self"]]]],[11,"rem_assign","","",2,[[["self"],["i32"]]]],[11,"rem_assign","","",2,[[["self"],["i32"]]]],[11,"rem_assign","","",2,[[["self"],["u32"]]]],[11,"rem_assign","","",2,[[["self"],["u32"]]]],[11,"rem_assign","","",2,[[["i64"],["self"]]]],[11,"rem_assign","","",2,[[["i64"],["self"]]]],[11,"rem_assign","","",2,[[["self"],["u64"]]]],[11,"rem_assign","","",2,[[["self"],["u64"]]]],[11,"rem_assign","","",2,[[["self"],["i128"]]]],[11,"rem_assign","","",2,[[["self"],["i128"]]]],[11,"rem_assign","","",2,[[["self"],["u128"]]]],[11,"rem_assign","","",2,[[["self"],["u128"]]]],[11,"sum","","",2,[[["iterator"]],["self"]]],[11,"sum","","",3,[[["iterator"]],["self"]]],[11,"product","","",2,[[["iterator"]],["self"]]],[11,"product","","",3,[[["iterator"]],["self"]]]],"p":[[4,"Error"],[4,"RoundMode"],[3,"Integer"],[3,"Rational"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);