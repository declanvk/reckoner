var searchIndex = JSON.parse('{\
"creachadair_imath_sys":{"doc":"","t":[7,7,17,7,7,17,7,7,7,7,7,7,7,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,17,17,17,17,6,6,6,6,6,3,3,12,12,12,11,11,11,11,11,11,11,11,12],"n":["MP_BADARG","MP_FALSE","MP_MAX_RADIX","MP_MEMORY","MP_MINERR","MP_MIN_RADIX","MP_NEG","MP_OK","MP_RANGE","MP_TRUE","MP_TRUNC","MP_UNDEF","MP_ZPOS","alloc","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","den","digits","fmt","fmt","from","from","into","into","mp_digit","mp_error_string","mp_int","mp_int_abs","mp_int_add","mp_int_add_value","mp_int_alloc","mp_int_binary_len","mp_int_clear","mp_int_compare","mp_int_compare_unsigned","mp_int_compare_uvalue","mp_int_compare_value","mp_int_compare_zero","mp_int_copy","mp_int_count_bits","mp_int_default_precision","mp_int_div","mp_int_div_pow2","mp_int_div_value","mp_int_divisible_value","mp_int_egcd","mp_int_expt","mp_int_expt_full","mp_int_expt_value","mp_int_exptmod","mp_int_exptmod_bvalue","mp_int_exptmod_evalue","mp_int_exptmod_known","mp_int_find_prime","mp_int_free","mp_int_gcd","mp_int_init","mp_int_init_copy","mp_int_init_size","mp_int_init_uvalue","mp_int_init_value","mp_int_invmod","mp_int_is_pow2","mp_int_is_prime","mp_int_lcm","mp_int_mod","mp_int_mul","mp_int_mul_pow2","mp_int_mul_value","mp_int_multiply_threshold","mp_int_neg","mp_int_read_binary","mp_int_read_cstring","mp_int_read_string","mp_int_read_unsigned","mp_int_redux_const","mp_int_root","mp_int_set_uvalue","mp_int_set_value","mp_int_sqr","mp_int_string_len","mp_int_sub","mp_int_sub_value","mp_int_swap","mp_int_to_binary","mp_int_to_int","mp_int_to_string","mp_int_to_uint","mp_int_to_unsigned","mp_int_unsigned_len","mp_int_zero","mp_rat","mp_rat_abs","mp_rat_add","mp_rat_add_int","mp_rat_alloc","mp_rat_clear","mp_rat_compare","mp_rat_compare_unsigned","mp_rat_compare_value","mp_rat_compare_zero","mp_rat_copy","mp_rat_decimal_len","mp_rat_denom","mp_rat_denom_ref","mp_rat_div","mp_rat_div_int","mp_rat_expt","mp_rat_free","mp_rat_init","mp_rat_init_copy","mp_rat_init_size","mp_rat_is_integer","mp_rat_mul","mp_rat_mul_int","mp_rat_neg","mp_rat_numer","mp_rat_numer_ref","mp_rat_read_cdecimal","mp_rat_read_cstring","mp_rat_read_decimal","mp_rat_read_string","mp_rat_read_ustring","mp_rat_recip","mp_rat_reduce","mp_rat_set_uvalue","mp_rat_set_value","mp_rat_sign","mp_rat_string_len","mp_rat_sub","mp_rat_sub_int","mp_rat_to_decimal","mp_rat_to_ints","mp_rat_to_string","mp_rat_zero","mp_result","mp_round_mode","mp_round_mode_MP_ROUND_DOWN","mp_round_mode_MP_ROUND_HALF_DOWN","mp_round_mode_MP_ROUND_HALF_UP","mp_round_mode_MP_ROUND_UP","mp_sign","mp_size","mp_small","mp_usmall","mp_word","mpq_t","mpz_t","num","sign","single","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","used"],"q":["creachadair_imath_sys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","A sign indicating a (strictly) negative value.","","","","","","A sign indicating a zero or positive value.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns a pointer to a brief, human-readable, …","","Sets <code>c</code> to the absolute value of <code>a</code>.","Sets <code>c</code> to the sum of <code>a</code> and <code>b</code>.","Sets <code>c</code> to the sum of <code>a</code> and <code>value</code>.","Allocates a fresh zero-valued <code>mpz_t</code> on the heap, returning …","Returns the number of bytes to represent <code>z</code> in 2’s …","Releases the storage used by <code>z</code>.","Returns the comparator of <code>a</code> and <code>b</code>.","Returns the comparator of the magnitudes of <code>a</code> and <code>b</code>, …","Returns the comparator of <code>z</code> and the unsigned value <code>uv</code>.","Returns the comparator of <code>z</code> and the signed value <code>v</code>.","Returns the comparator of <code>z</code> and zero.","Replaces the value of <code>c</code> with a copy of the value of <code>a</code>. No …","Returns the number of significant bits in <code>z</code>.","Sets the default number of digits allocated to an <code>mp_int</code> …","Sets <code>q</code> and <code>r</code> to the quotent and remainder of <code>a / b</code>. …","Sets <code>q</code> and <code>r</code> to the quotient and remainder of <code>a / 2^p2</code>. …","Sets <code>q</code> and <code>*r</code> to the quotent and remainder of <code>a / value</code>. …","Reports whether <code>a</code> is divisible by <code>v</code>.","Sets <code>c</code> to the greatest common divisor of <code>a</code> and <code>b</code>, and sets …","Sets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power. It returns …","Sets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power. It returns …","Sets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power. It returns …","Sets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power, reduced …","Sets <code>c</code> to the value of <code>value</code> raised to the <code>b</code> power, modulo …","Sets <code>c</code> to the value of <code>a</code> raised to the <code>value</code> power, modulo …","Sets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power, reduced …","","Releases the storage used by <code>z</code> and also <code>z</code> itself. This …","Sets <code>c</code> to the greatest common divisor of <code>a</code> and <code>b</code>.","Initializes <code>z</code> with 1-digit precision and sets it to zero.  …","Initializes <code>z</code> to be a copy of an already-initialized value …","Initializes <code>z</code> with at least <code>prec</code> digits of storage, and …","Initializes <code>z</code> to the specified unsigned <code>value</code> at default …","Initializes <code>z</code> to the specified signed <code>value</code> at default …","Sets <code>c</code> to the multiplicative inverse of <code>a</code> modulo <code>m</code>, if it …","Returns <code>k &gt;= 0</code> such that <code>z</code> is <code>2^k</code>, if such a <code>k</code> exists. If …","","Sets <code>c</code> to the least common multiple of <code>a</code> and <code>b</code>.","Sets <code>c</code> to the remainder of <code>a / m</code>. The remainder is pinned …","Sets <code>c</code> to the product of <code>a</code> and <code>b</code>.","Sets <code>c</code> to the product of <code>a</code> and <code>2^p2</code>. Requires <code>p2 &gt;= 0</code>.","Sets <code>c</code> to the product of <code>a</code> and <code>value</code>.","Sets the number of digits below which multiplication will …","Sets <code>c</code> to the additive inverse (negation) of <code>a</code>.","Reads a 2’s complement binary value from <code>buf</code> into <code>z</code>, …","Reads a string of ASCII digits in the specified <code>radix</code> from …","Reads a string of ASCII digits in the specified <code>radix</code> from …","Reads an unsigned binary value from <code>buf</code> into <code>z</code>, where <code>len</code> …","Sets <code>c</code> to the reduction constant for Barrett reduction by …","Sets <code>c</code> to the greatest integer not less than the <code>b</code>th root …","Sets <code>z</code> to the value of the specified unsigned <code>value</code>.","Sets <code>z</code> to the value of the specified signed <code>value</code>.","Sets <code>c</code> to the square of <code>a</code>.","Reports the minimum number of characters required to …","Sets <code>c</code> to the difference of <code>a</code> less <code>b</code>.","Sets <code>c</code> to the difference of <code>a</code> less <code>value</code>.","Swaps the values and storage between <code>a</code> and <code>c</code>.","Converts <code>z</code> to 2’s complement binary, writing at most …","Returns <code>MP_OK</code> if <code>z</code> is representable as <code>mp_small</code>, else …","Converts <code>z</code> to a zero-terminated string of characters in …","Returns <code>MP_OK</code> if <code>z</code> is representable as <code>mp_usmall</code>, or …","Converts the magnitude of <code>z</code> to unsigned binary, writing at …","Returns the number of bytes required to represent <code>z</code> as an …","Sets <code>z</code> to zero. The allocated storage of <code>z</code> is not changed.","","Sets <code>c</code> to the absolute value of <code>a</code>.","Sets <code>c</code> to the sum of <code>a</code> and <code>b</code>.","Sets <code>c</code> to the sum of <code>a</code> and integer <code>b</code>.","Allocates a fresh zero-valued <code>mpq_t</code> on the heap, returning …","Releases the storage used by <code>r</code>.","Returns the comparator of <code>a</code> and <code>b</code>.","Returns the comparator of the magnitudes of <code>a</code> and <code>b</code>, …","Returns the comparator of <code>r</code> and the signed ratio <code>n / d</code>. It …","Returns the comparator of <code>r</code> and zero.","Sets <code>c</code> to a copy of the value of <code>a</code>. No new memory is …","Reports the length in bytes of the buffer needed to …","Sets <code>z</code> to a copy of the denominator of <code>r</code>.","Returns a pointer to the denominator of <code>r</code>.","Sets <code>c</code> to the ratio <code>a / b</code> if that ratio is defined. It …","Sets <code>c</code> to the ratio <code>a / b</code> if that ratio is defined. It …","Sets <code>c</code> to the value of <code>a</code> raised to the <code>b</code> power. It returns …","Releases the storage used by <code>r</code> and also <code>r</code> itself. This …","Initializes <code>r</code> with 1-digit precision and sets it to zero. …","Initializes <code>r</code> to be a copy of an already-initialized value …","Initializes <code>r</code> with at least <code>n_prec</code> digits of storage for …","Reports whether <code>r</code> is an integer, having canonical …","Sets <code>c</code> to the product of <code>a</code> and <code>b</code>.","Sets <code>c</code> to the product of <code>a</code> and integer <code>b</code>.","Sets <code>c</code> to the absolute value of <code>a</code>.","Sets <code>z</code> to a copy of the numerator of <code>r</code>.","Returns a pointer to the numerator of <code>r</code>.","Sets <code>r</code> to the value represented by a zero-terminated …","Sets <code>r</code> to the value represented by a zero-terminated …","Sets <code>r</code> to the value represented by a zero-terminated …","Sets <code>r</code> to the value represented by a zero-terminated …","Sets <code>r</code> to the value represented by a zero-terminated …","Sets <code>c</code> to the reciprocal of <code>a</code> if the reciprocal is defined.","Reduces <code>r</code> in-place to lowest terms and canonical form.","Sets the value of <code>r</code> to the ratio of unsigned <code>numer</code> to …","Sets the value of <code>r</code> to the ratio of signed <code>numer</code> to signed …","Reports the sign of <code>r</code>.","Reports the minimum number of characters required to …","Sets <code>c</code> to the difference of <code>a</code> less <code>b</code>.","Sets <code>c</code> to the difference of <code>a</code> less integer <code>b</code>.","Converts the value of <code>r</code> to a string in decimal-point …","Reports whether the numerator and denominator of <code>r</code> can be …","Converts <code>r</code> to a zero-terminated string of the format <code>&quot;n/d&quot;</code> …","Sets <code>r</code> to zero. The allocated storage of <code>r</code> is not changed.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,1,2,1,2,1,2,2,1,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,2,1,2,1,2,1,2,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],0,0,[[1,3],4],[[2,3],4],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0],"p":[[3,"mpz_t"],[3,"mpq_t"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"reckoner":{"doc":"Arbitrary precision integer and rational arithmetic …","tn":["ConversionOutsideRange","Down","Error","HalfDown","HalfUp","IMath","IntParseFailed","Integer","NoErrorPossible","NotCanonicalInteger","Rational","ReadStringTruncated","RemainderOutsideBounds","RoundMode","StringReprContainedNul","UnknownRoundingMode","Up","absolute_value","absolute_value","absolute_value_assign","absolute_value_assign","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign_integer","add_integer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","cmp","cmp","compare","compare","compare_magnitude","compare_magnitude","compare_zero","compare_zero","copy_to","copy_to","default","default","denominator","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","divide","divide","divide_assign","divide_assign","divide_assign_integer","divide_full","divide_integer","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_raw","from_str","from_str","from_string","into","into","into","into","into_raw","into_raw","is_integer","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply_assign","multiply_assign","multiply_assign_integer","multiply_integer","neg","neg","neg","neg","negate","negate","negate_assign","negate_assign","new","new","numerator","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","product","product","provide","reciprocal","reciprocal_assign","reduce","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","remainder","remainder_assign","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","subtract","subtract","subtract_assign","subtract_assign","subtract_assign_integer","subtract_integer","sum","sum","to_decimal","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","zero","zero","code","msg"],"q":["reckoner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","reckoner::Error",""],"d":["Could not convert a value to a primitive integer type …","Truncates the value toward zero.","Error used in <code>reckoner</code>, usually originating from …","Rounds the value to nearest digit, half goes toward zero.","Rounds the value to nearest digit, half rounds upward.","Internal error from <code>creachadair_imath_sys</code>.","Integer parse failed.","Multiple precision integer value.","It impossible for this error to occur.","The rational value is not a canonical integer, in the form …","Multiple precision rational value.","An error occurred when converting a string to a value, and …","The result of a remainder operation was outside the …","as a decimal value.  There are four rounding modes …","When converting from a string representation, the given …","Unknown value for an imath rounding mode.","Rounds the value away from zero.","Return the absolute value","Return the absolute value","Assign the absolute value to self","Assign the absolute value to self","","","","","","","","","","","","","","","","","","","","","Add two integers and return the result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add two rational values and return the result.","","","","","","","","","","","","","","","","","","","","","","","","","","","Add two integers and assign the result to self","","","","","","","","","","Add two rationals and assign the result to self.","","","","","","","","","","","","","","","","","","","","","","","Add a rational value and an integer value and assign the …","Add a rational value and an integer value and return the …","","","","","","","","","","","","","","","","","","","Compare two integers","Compare two rationals","Compare the magnitude of two integers, not taking sign …","Compare the magnitude of two rationals, not taking sign …","Compare an integer to zero.","Compare a rational to zero.","Replaces the value of <code>other</code> with a copy of the value of …","Replaces the value of <code>other</code> with a copy of the value of …","","","Return a copy of the denominator of the rational value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Divide two integers and return only quotient","Divide two rational values and return the result.","Divide two integers and assign the result to self","Divide two rationals and assign the result to self.","Divide a rational value and an integer value and assign …","Divide two integers and return quotient and remainder","Divide a rational value and an integer value and return …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Construct an Integer from a raw non-null pointer to …","Construct a Rational from a raw non-null pointer to …","","","Parse an <code>Integer</code> from the given string, with the specified …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the Integer, returning a wrapped raw pointer.","Consumes the Rational, returning a wrapped raw pointer.","Returns true if the denominator is 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiply two integers and return the result","Multiply two rational values and return the result.","Multiply two integers and assign the result to self","Multiply two rationals and assign the result to self.","Multiply a rational value and an integer value and assign …","Multiply a rational value and an integer value and return …","","","","","Return the additive inverse","Return the additive inverse","Assign the additive inverse to self","Assign the additive inverse to self","Construct a new integer with a default value of zero.","Create a new rational with a default value of zero (0/1).","Return a copy of the numerator of the rational value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the multiplicative inverse","Assign the multiplicative inverse to self","Reduces <code>r</code> in-place to lowest terms and canonical form.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Divide two integers and return only remainder","Divide two integers and assign the remainder to self","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtract two integers and return the result","Subtract two rational values and return the result.","Subtract two integers and assign the result to self","Subtract two rationals and assign the result to self.","Subtract a rational value and an integer value and assign …","Subtract a rational value and an integer value and return …","","","Converts the value of <code>self</code> to a string in base-10 …","","","","","","","","","","","","","","","","","","","","","","Set value of integer to zero","Set value of integer to zero","Internal <code>creachadair_imath_sys</code> error code.","Custom message to display."],"i":[13,29,0,29,29,13,13,0,13,13,0,13,13,0,13,13,29,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,29,13,1,2,29,13,1,2,13,1,2,1,2,13,1,2,1,2,1,2,1,2,1,2,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,2,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,13,1,1,2,2,13,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,29,13,13,13,13,1,2,1,2,1,1,2,29,13,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,2,2,1,1,2,2,1,2,1,2,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,13,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,2,2,1,2,2,1,2,13,1,2,13,1,1,1,2,29,29,13,1,2,29,13,1,2,29,13,1,2,33,33],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[1],[2],[[1,3]],[[1,4]],[[1,5]],[[1,5]],[[1,5]],[[1,5]],[[1,6]],[[1,6]],[[1,6]],[[1,6]],[[1,3]],[[1,3]],[[1,3]],[[1,1]],[[1,7]],[[1,7]],[[1,8]],[[1,7]],[[1,8]],[[1,7]],[[1,1],1],[[1,9]],[[1,9]],[[1,9]],[[1,9]],[[1,8]],[[1,8]],[[1,4]],[[1,4]],[[1,4]],[[1,10]],[[1,10]],[[1,10]],[[1,10]],[[1,11]],[[1,11]],[[1,11]],[[1,11]],[[1,12]],[[1,12]],[[1,12]],[[1,12]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,1]],[[1,1]],[[1,1]],[[2,1]],[[2,2]],[[2,11]],[[2,11]],[[2,11]],[[2,10]],[[2,10]],[[2,10]],[[2,10]],[[2,5]],[[2,4]],[[2,4]],[[2,4]],[[2,4]],[[2,9]],[[2,9]],[[2,5]],[[2,9]],[[2,9]],[[2,7]],[[2,7]],[[2,7]],[[2,7]],[[2,5]],[[2,8]],[[2,8]],[[2,8]],[[2,3]],[[2,3]],[[2,3]],[[2,3]],[[2,6]],[[2,6]],[[2,6]],[[2,6]],[[2,8]],[[2,2]],[[2,2],2],[[2,12]],[[2,12]],[[2,12]],[[2,12]],[[2,1]],[[2,5]],[[2,1]],[[2,1]],[[2,2]],[[2,2]],[[2,11]],[[1,10]],[[1,1]],[[1,8]],[[1,8]],[[1,5]],[[1,5]],[[1,6]],[[1,6]],[[1,3]],[[1,3]],[[1,7]],[[1,7]],[[1,9]],[[1,9]],[[1,4]],[[1,1]],[[1,4]],[[1,10]],[[1,11]],[[1,11]],[[1,12]],[[1,12]],[[1,1]],[[2,2]],[[2,8]],[[2,2]],[[2,1]],[[2,5]],[[2,2]],[[2,5]],[[2,6]],[[2,6]],[[2,3]],[[2,3]],[[2,8]],[[2,7]],[[2,7]],[[2,12]],[[2,9]],[[2,9]],[[2,12]],[[2,10]],[[2,11]],[[2,4]],[[2,10]],[[2,4]],[[2,1]],[[2,11]],[[2,1]],[[2,1],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[13,13],[[1,1]],[[2,2]],[[]],[[]],[[]],[[1,1],14],[[2,2],14],[[1,1],14],[[2,2],14],[[1,1],14],[[2,2],14],[1,14],[2,14],[[1,1]],[[2,2]],[[],1],[[],2],[2,1],[[1,11]],[[1,7]],[[1,7]],[[1,3]],[[1,3]],[[1,3]],[[1,3]],[[1,6]],[[1,6]],[[1,6]],[[1,6]],[[1,5]],[[1,5]],[[1,5]],[[1,5]],[[1,8]],[[1,8]],[[1,8]],[[1,8]],[[1,1]],[[1,7]],[[1,7]],[[1,9]],[[1,9]],[[1,9]],[[1,9]],[[1,4]],[[1,4]],[[1,4]],[[1,4]],[[1,10]],[[1,10]],[[1,10]],[[1,10]],[[1,11]],[[1,11]],[[1,11]],[[1,12]],[[1,12]],[[1,12]],[[1,12]],[[1,1]],[[1,1]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,1]],[[2,4]],[[2,7]],[[2,8]],[[2,8]],[[2,8]],[[2,5]],[[2,5]],[[2,5]],[[2,5]],[[2,6]],[[2,6]],[[2,6]],[[2,6]],[[2,3]],[[2,3]],[[2,3]],[[2,3]],[[2,7]],[[2,7]],[[2,7]],[[2,9]],[[2,9]],[[2,9]],[[2,8]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[2,1]],[[2,1]],[[2,1]],[[2,1]],[[2,12]],[[2,12]],[[2,12]],[[2,12]],[[2,11]],[[2,11]],[[2,11]],[[2,11]],[[2,10]],[[2,10]],[[2,10]],[[2,10]],[[2,4]],[[2,4]],[[2,4]],[[2,9]],[[1,10]],[[1,10]],[[1,11]],[[1,11]],[[1,4]],[[1,12]],[[1,12]],[[1,1]],[[1,1]],[[1,8]],[[1,8]],[[1,5]],[[1,5]],[[1,6]],[[1,6]],[[1,3]],[[1,3]],[[1,7]],[[1,7]],[[1,9]],[[1,9]],[[1,4]],[[2,5]],[[2,4]],[[2,2]],[[2,2]],[[2,1]],[[2,1]],[[2,12]],[[2,12]],[[2,11]],[[2,11]],[[2,10]],[[2,10]],[[2,8]],[[2,8]],[[2,5]],[[2,6]],[[2,6]],[[2,3]],[[2,3]],[[2,7]],[[2,7]],[[2,9]],[[2,9]],[[2,4]],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[[2,1]],[[1,1]],[[2,1],2],[1],[2],[[1,2],15],[[1,3],15],[[1,8],15],[[1,5],15],[[1,6],15],[[1,1],15],[[1,11],15],[[1,12],15],[[1,4],15],[[1,10],15],[[1,9],15],[[1,7],15],[2,15],[[2,9],15],[[2,2],15],[[2,1],15],[2,15],[[2,8],15],[2,15],[[2,5],15],[2,15],[[2,6],15],[2,15],[[2,3],15],[2,15],[[2,7],15],[2,15],[[2,11],15],[2,15],[[2,10],15],[2,15],[[2,4],15],[2,15],[[2,12],15],[2,15],[[13,13],15],[[1,16],17],[[1,16],17],[[2,16],17],[[2,16],17],[[13,16],17],[[13,16],17],[7,1],[[]],[8,1],[8,1],[5,1],[5,1],[6,1],[6,1],[3,1],[3,1],[7,1],[9,1],[9,1],[4,1],[4,1],[10,1],[10,1],[11,1],[11,1],[12,1],[12,1],[6,2],[5,2],[12,2],[4,2],[9,2],[7,2],[7,2],[[],2],[[],2],[[],2],[1,2],[3,2],[1,2],[3,2],[12,2],[6,2],[[]],[5,2],[9,2],[11,2],[8,2],[11,2],[10,2],[10,2],[4,2],[8,2],[[]],[18,13],[19,13],[[]],[20,13],[21,1],[22,2],[23,[[24,[1]]]],[23,[[24,[2,13]]]],[[[25,[23]],11],[[24,[1,13]]]],[[]],[[]],[[]],[[]],[1,21],[2,22],[2,15],[[1,8]],[[1,6]],[[1,3]],[[1,8]],[[1,8]],[[1,5]],[[1,5]],[[1,5]],[[1,5]],[[1,6]],[[1,7]],[[1,3]],[[1,3]],[[1,7]],[[1,4]],[[1,4]],[[1,9]],[[1,6]],[[1,9]],[[1,3]],[[1,6]],[[1,9]],[[1,2]],[[1,8]],[[1,2]],[[1,1]],[[1,1]],[[1,1]],[[1,12]],[[1,12]],[[1,12]],[[1,12]],[[1,11]],[[1,11]],[[1,11]],[[1,11]],[[1,10]],[[1,10]],[[1,10]],[[1,10]],[[1,4]],[[1,4]],[[1,2]],[[1,2]],[[1,9]],[[1,7]],[[1,7]],[[1,1]],[[2,1]],[[2,5]],[[2,6]],[[2,9]],[[2,5]],[[2,5]],[[2,5]],[[2,8]],[[2,8]],[[2,8]],[[2,8]],[[2,6]],[[2,6]],[[2,6]],[[2,3]],[[2,3]],[[2,3]],[[2,3]],[[2,7]],[[2,7]],[[2,7]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[2,1]],[[2,1]],[[2,1]],[[2,12]],[[2,12]],[[2,12]],[[2,12]],[[2,11]],[[2,11]],[[2,11]],[[2,11]],[[2,10]],[[2,10]],[[2,10]],[[2,10]],[[2,4]],[[2,7]],[[2,4]],[[2,4]],[[2,4]],[[2,9]],[[2,9]],[[2,9]],[[1,9]],[[1,8]],[[1,5]],[[1,6]],[[1,6]],[[1,3]],[[1,3]],[[1,7]],[[1,7]],[[1,9]],[[1,4]],[[1,4]],[[1,10]],[[1,10]],[[1,11]],[[1,11]],[[1,12]],[[1,12]],[[1,1]],[[1,1]],[[1,5]],[[1,8]],[[2,4]],[[2,12]],[[2,4]],[[2,10]],[[2,10]],[[2,11]],[[2,11]],[[2,12]],[[2,1]],[[2,1]],[[2,2]],[[2,2]],[[2,9]],[[2,9]],[[2,7]],[[2,7]],[[2,3]],[[2,3]],[[2,8]],[[2,8]],[[2,5]],[[2,5]],[[2,6]],[[2,6]],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[[2,1]],[[2,1],2],[1],[1],[2],[2],[1,1],[2,2],[1],[2],[[],1],[[],2],[2,1],[[1,12],[[26,[14]]]],[[1,4],[[26,[14]]]],[[1,2],[[26,[14]]]],[[1,1],[[26,[14]]]],[[1,11],[[26,[14]]]],[[1,8],[[26,[14]]]],[[1,5],[[26,[14]]]],[[1,6],[[26,[14]]]],[[1,3],[[26,[14]]]],[[1,7],[[26,[14]]]],[[1,9],[[26,[14]]]],[[1,10],[[26,[14]]]],[[2,6],[[26,[14]]]],[[2,10],[[26,[14]]]],[[2,11],[[26,[14]]]],[2,[[26,[14]]]],[[2,1],[[26,[14]]]],[[2,2],[[26,[14]]]],[[2,12],[[26,[14]]]],[2,[[26,[14]]]],[[2,4],[[26,[14]]]],[2,[[26,[14]]]],[[2,9],[[26,[14]]]],[2,[[26,[14]]]],[[2,7],[[26,[14]]]],[2,[[26,[14]]]],[[2,3],[[26,[14]]]],[2,[[26,[14]]]],[2,[[26,[14]]]],[2,[[26,[14]]]],[[2,8],[[26,[14]]]],[2,[[26,[14]]]],[[2,5],[[26,[14]]]],[2,[[26,[14]]]],[2,[[26,[14]]]],[27,1],[27,2],[28],[2,2],[2],[2],[[1,7]],[[1,5]],[[1,6]],[[1,6]],[[1,3]],[[1,3]],[[1,3]],[[1,3]],[[1,7]],[[1,7]],[[1,7]],[[1,9]],[[1,9]],[[1,11]],[[1,6]],[[1,5]],[[1,5]],[[1,5]],[[1,11]],[[1,9]],[[1,4]],[[1,6]],[[1,8]],[[1,8]],[[1,8]],[[1,4]],[[1,4]],[[1,4]],[[1,8]],[[1,12]],[[1,12]],[[1,12]],[[1,1]],[[1,10]],[[1,10]],[[1,10]],[[1,10]],[[1,11]],[[1,1]],[[1,1]],[[1,11]],[[1,12]],[[1,1]],[[1,9]],[[1,12]],[[1,11]],[[1,3]],[[1,8]],[[1,3]],[[1,1]],[[1,12]],[[1,1]],[[1,6]],[[1,5]],[[1,7]],[[1,6]],[[1,11]],[[1,10]],[[1,10]],[[1,4]],[[1,4]],[[1,9]],[[1,9]],[[1,7]],[[1,5]],[[1,8]],[[1,1],1],[[1,1]],[[1,12]],[[1,4]],[[1,9]],[[1,9]],[[1,7]],[[1,7]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,12]],[[1,4]],[[1,12]],[[1,12]],[[1,11]],[[1,11]],[[1,11]],[[1,11]],[[1,10]],[[1,10]],[[1,10]],[[1,10]],[[1,4]],[[1,9]],[[1,7]],[[1,7]],[[1,3]],[[1,3]],[[1,3]],[[1,3]],[[1,6]],[[1,6]],[[1,6]],[[1,5]],[[1,5]],[[1,6]],[[1,5]],[[1,5]],[[1,8]],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[[1,8]],[[1,8]],[[1,8]],[[1,4]],[[1,9]],[[2,1]],[[2,11]],[[2,11]],[[2,10]],[[2,10]],[[2,10]],[[2,10]],[[2,4]],[[2,4]],[[2,4]],[[2,4]],[[2,9]],[[2,9]],[[2,9]],[[2,9]],[[2,7]],[[2,7]],[[2,7]],[[2,7]],[[2,3]],[[2,3]],[[2,3]],[[2,3]],[[2,6]],[[2,6]],[[2,6]],[[2,6]],[[2,5]],[[2,5]],[[2,5]],[[2,5]],[[2,8]],[[2,8]],[[2,8]],[[2,8]],[[2,2]],[[2,11]],[[2,11]],[[2,12]],[[2,12]],[[2,12]],[[2,12]],[[2,1]],[[2,1]],[[2,1]],[[2,2]],[[2,2]],[[2,2]],[[1,8]],[[1,11]],[[1,3]],[[1,8]],[[1,5]],[[1,5]],[[1,6]],[[1,6]],[[1,1]],[[1,12]],[[1,12]],[[1,4]],[[1,4]],[[1,3]],[[1,7]],[[1,7]],[[1,10]],[[1,10]],[[1,11]],[[1,9]],[[1,1]],[[1,9]],[[2,12]],[[2,6]],[[2,8]],[[2,3]],[[2,2]],[[2,3]],[[2,8]],[[2,6]],[[2,5]],[[2,5]],[[2,9]],[[2,9]],[[2,4]],[[2,2]],[[2,1]],[[2,7]],[[2,1]],[[2,7]],[[2,4]],[[2,10]],[[2,10]],[[2,11]],[[2,12]],[[2,11]],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[[2,1]],[[2,1],2],[27,1],[27,2],[[2,29,4],30],[[]],[[]],[[]],[[],30],[[],30],[[],30],[2,[[24,[1]]]],[[],24],[2,[[24,[1]]]],[[],24],[[],24],[31,[[24,[29,13]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],32],[[],32],[[],32],[[],32],[1],[2],0,0],"p":[[3,"Integer"],[3,"Rational"],[15,"i64"],[15,"u16"],[15,"i128"],[15,"u64"],[15,"u32"],[15,"u128"],[15,"i32"],[15,"i16"],[15,"u8"],[15,"i8"],[4,"Error"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TryFromIntError"],[3,"ParseIntError"],[4,"Infallible"],[3,"mpz_t"],[3,"mpq_t"],[15,"str"],[4,"Result"],[8,"AsRef"],[4,"Option"],[8,"Iterator"],[3,"Demand"],[4,"RoundMode"],[3,"String"],[6,"mp_round_mode"],[3,"TypeId"],[13,"IMath"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
